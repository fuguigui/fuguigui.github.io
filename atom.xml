<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fululu</title>
  
  <subtitle>Keep Growing</subtitle>
  <link href="https://fuguigui.github.io/atom.xml" rel="self"/>
  
  <link href="https://fuguigui.github.io/"/>
  <updated>2024-09-01T22:36:56.702Z</updated>
  <id>https://fuguigui.github.io/</id>
  
  <author>
    <name>Fululu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly Summary</title>
    <link href="https://fuguigui.github.io/y2020w46-summary/"/>
    <id>https://fuguigui.github.io/y2020w46-summary/</id>
    <published>2024-09-01T22:36:56.702Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>上一周基调是平平日常的，发生的一件大事：和国内某互联网的HR谈了薪资，总体是心动的，有一些小犹豫，但真要做出最后决定还取决于其他事情的发展。</p><h1 id="计划回顾"><a href="#计划回顾" class="headerlink" title="计划回顾"></a>计划回顾</h1><p>上周计划的完成情况：</p><p>Life：80%. Incomplete tasks:</p><ul><li>Deutsch Vokabel: Everyday</li><li>Deutsch lernen: 2 episodes</li></ul><p>为啥没完成呢？德语的任务太笼统了，木有计划性可言（我指的是任务内容木有计划性，时间上是有了计划性）。不代表我没有学习德语哇，周日把之前没有学完的A2-B1词汇教材拿出来了，准备按照这个教材走。</p><p>Mathematical Optimization: 80%. Incomplete tasks:</p><ul><li>Video: 2020-11-12 (11.12)</li><li>总结之前所学的内容（11.13）</li></ul><p>为啥没有完成呢？</p><ul><li>Video因为执行进度慢了一拍，11-12的video在11-13准备去看，但是还没有更新出来。</li><li>总结这项工作，为时尚早。我去补exercise了。准备在补exercise的过程中做总结和读script的工作</li></ul><p>Thesis:</p><ul><li>Coding: 66%. Incomplete task: hodgenet的模型pytorch重写</li><li>reading &amp; task: 40%. Incomplete task: topological,  1810.03068, 2010.15010</li></ul><p>码代码的任务，会在执行过程中产生很多的新需求，其实蛮难把握的。</p><p>读paper时，有些paper还处在比较陌生的阶段，读得慢。有些需要加快速度，直奔精华了。希望在这些paper读过一遍之后，再进行一次专题阅读。比如：只看paper中提出的现有方法的issue，只看他们解决的问题，只看他们使用的数据集，只看他们的创新点等。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>尝试了超市买的油酥皮，直接烤派，和牛角包一个口感。不过问题是差了些奶香</li><li>跑步上了一次Honger山</li><li>周日骑车去湖边晒太阳。看到爸爸妈妈带着孩子，情侣把手放到同一个口袋里，人们在湖边喂鸟，好幸福的场景。和心爱的人一起忽略时间的感觉好让人羡慕。一瞬间，我竟然假想起来，如果我是苏黎世的市政工作人员，我也不希望lockdown。</li><li>和老公一起看了一部电影《半个喜剧》。喜欢任素汐～</li><li>和girls每周一起看《演员请就位》。脸盲如我，终于识别出了丁程鑫和何昶希</li><li>剪出了大半个月前撸妆视频，视频原厂一个多小时，剪到五分多钟，剪辑过程用了三个小时。</li><li>买了一瓶香氛：ipuro cedar wood（雪松木）。Top note: Orange, Lemon, Heart note: Cedar wood, rosemary（迷迭香），ylang yang（依兰）, Base note: Sandalwood（檀香）, vanilla（香草）, ebony（黑檀树）。摆在窗台前，工作时隐约能闻到它的香味，好舒服。</li><li>苏黎世的暖秋快过去了，冬天要来啦</li><li>重新开始德语词汇的记忆</li></ul><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><h2 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h2><ul><li><input disabled="" type="checkbox"> 继续好好睡觉，每天八小时打卡</li><li><input disabled="" type="checkbox"> 整理出待剪辑的vlog list，并把香蕉糊的这一期剪出来～</li><li><input disabled="" type="checkbox"> 缺氧：解决电路过载问题</li><li><input disabled="" type="checkbox"> This is us：看两集</li><li><input disabled="" type="checkbox"> 中午和室友一起看rick and morty，season 4: episode 3, 4,5</li><li><input disabled="" type="checkbox"> 权力的游戏：第七季一二集</li><li><input disabled="" type="checkbox"> deutsch: <ul><li><input disabled="" type="checkbox"> 词汇计划</li><li><input disabled="" type="checkbox"> 工作日早上进行15分钟听力吼不吼</li></ul></li><li><input disabled="" type="checkbox"> Piano：<ul><li><input disabled="" type="checkbox"> 遇见</li><li><input disabled="" type="checkbox"> 另一首曲子</li></ul></li><li><input disabled="" type="checkbox"> 练一张毛笔字</li><li><input disabled="" type="checkbox"> 读书：美丽之问</li></ul><h2 id="Mathematical-Optimization"><a href="#Mathematical-Optimization" class="headerlink" title="Mathematical Optimization"></a>Mathematical Optimization</h2><ul><li><input disabled="" type="checkbox"> Video 11-12 (11-16)</li><li><input disabled="" type="checkbox"> Course 11-16(11-16)</li><li><input disabled="" type="checkbox"> Script: page: 18-34 (11.17)</li><li><input disabled="" type="checkbox"> script: page: 34-46, problem set 2 (11.18)</li><li><input disabled="" type="checkbox"> Course: 11-19 (11.19)</li><li><input disabled="" type="checkbox"> script: page: 46-71 , problem set 3 (11.20)</li></ul><h2 id="Thesis"><a href="#Thesis" class="headerlink" title="Thesis"></a>Thesis</h2><ul><li><input disabled="" type="checkbox"> HodgeNet RNN + SNN data</li><li><input disabled="" type="checkbox"> SNN + HodgeNet Data</li><li><input disabled="" type="checkbox"> SIGN paper</li><li><input disabled="" type="checkbox"> 做SNN的时间空间资源占用分析</li><li><input disabled="" type="checkbox"> Compare reading: NHP VS Simplicial closure.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一周基调是平平日常的，发生的一件大事：和国内某互联网的HR谈了薪资，总体是心动的，有一些小犹豫，但真要做出最后决定还取决于其他事情的发展。&lt;/p&gt;
&lt;h1 id=&quot;计划回顾&quot;&gt;&lt;a href=&quot;#计划回顾&quot; class=&quot;headerlink&quot; title=&quot;计划回顾&quot;&gt;</summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="life" scheme="https://fuguigui.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>罗马罗马</title>
    <link href="https://fuguigui.github.io/luo-ma-luo-ma/"/>
    <id>https://fuguigui.github.io/luo-ma-luo-ma/</id>
    <published>2024-09-01T22:36:56.702Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>一</p><p>万事开头难。前后准备了一个多月，也无法提笔写下第一篇。总觉得，自己不论是文笔上还是内容上都没有准备好，还需要看更多的书，积累更多的素材，才能雕琢出理想中的作品。过度的完美主义，阻止了行动的启动。还好，偶然读到村上春树的《远方的鼓声》，那是他在中年时期旅居欧洲的文集，在字里行间竟有种找到知音的感觉，哈哈，称之为膜拜更合适。我的千丝万缕的心绪，被一个不同时代不同文化背景的人，用轻柔的笔触诉说出来。是种多么奇妙又惊喜的体验！遂下定决心，无论如何，提笔为敬。</p><p>二</p><p>原本计划中的第一篇要记述在瑞士的生活琐事，大纲反复拟写了几遍，相关书籍视频也学习了些，却总归少了味激情，难以成形。村上的第一篇以罗马起，读着读着唤起了我对罗马强烈的情感。之前苦苦寻之不得的激情，也突然充盈于心，何不也以此为始？</p><p>三</p><p>初见罗马，是在五月末的一天。原本计划坐一夜的火车，从威尼斯直达罗马，然而在威尼斯时，被这座小城迷了眼，竟忘记了买车票这档子事。待反应过来，票已售罄。不得不临时购买白天换乘两次的车票，提前了一个晚上到了罗马。</p><p>对罗马的渴望在心底深埋了多年，笼罩着一层神圣的光环。若问我对欧洲大陆最早的认知，无非是神话中的希腊，和光辉传奇的罗马帝国。</p><p>而今，距离常年的渴望只有几座城的距离，忐忑和紧张愈发强烈。</p><p>再一天，就是心心念念的罗马啊。</p><p>整日的舟车劳顿，面对这份激情，都显得微不足道了。</p><p>一大早上就从威尼斯出发，只来得及在火车站附近随便买个碱水面包和三明治，当一天的伙食。火车抵达博洛尼亚后，我本应换乘另一班去佛罗伦萨。我对意大利语丝毫不知，身边也没个同伴。看电子屏找不到火车的位置，去求助一个矮矮的老大爷引导员。我俩无法找到共通的语言，互相打手势比划。他看看车票，摇摇头两手交叉比了个大叉，又指指站外，划个圈，好像是告诉我错了错了，不在这里，要出去再转弯。意大利语的调子可真是抑扬顿挫啊，我想。车在哪儿没闹明白，但这趟火车似乎不在火车站里？我也不知哪来的胆量，估摸着大爷指的方向，就走出了车站。沿途遇上三三俩俩从车站出来拖行李箱的人，私以为是同行人，便跟着他们一起走。拐了个弯，他们停下来等，我也停下来。十几分钟后，居然还真等到了，是一辆车窗上临时贴着这班火车号的巴士。嘿，还有这档子事。</p><p>巴士在亚平宁山脉间攀爬，山路蜿蜒陡峭，司机师傅开得又快又稳。虽说才是五月，正午的阳光已强烈得晃眼，仿佛自带聒噪的蝉鸣背景音。我很庆幸自己躲在车里，不仅阴凉，还可以懒懒地窝在座位里啃三明治。现在是防疫即将松懈地时候，大家戴着口罩也不耽误吃东西。巴士的摇晃和五月开始萌芽的暑气，让我感到昏昏沉沉。一个瞌睡的功夫，巴士已穿过了山脉，抵达佛罗伦萨。</p><p>两年前和元元一起来过一次佛罗伦萨，光看车站名，就感觉很亲切。Firenze，翡冷翠，徐志摩曾如此诗意地呼唤她。</p><p>这一次，我独自一人，在Firenze的小车站换乘。这里距离市中心应该有些距离，站里站外都没什么人，视野范围内也没有出现佛罗伦萨标志性的圣母百花大教堂。不过，四周的建筑物倒是清一色黄色调的，是佛罗伦萨那股年代久远的味儿了。</p><p>火车来了，直抵意大利的心脏——罗马。在Termini火车站下车时，明明无人迎接，我却忍不住痴痴地笑。</p><p>罗马啊，罗马。我终于走进了这座史书中的城市。</p><p>四</p><p>欧洲的城市大多规模不大，特别是历史悠久的地方。我常不自觉地把其他国家的首都拿来和北京做对比，却发现二者不在一个量级。也是，帝都常住人口就有两千一百多万，比瑞士整个国家的人都多出了好几倍，怎能相提并论？且不论规模，首都的面貌也各不一样。</p><p>罗马就是一个有很多让人跌破眼镜的首都。</p><p>从车站出来，隐隐想要快走离开这儿。不宽的街道上挤满了出租车，一群旅客出站就会有一群司机涌上来，大声叫嚷着招揽生意。绕开这条出租车街，我逃进了一条僻静的小巷，好巧不巧碰到一老哥蹲在那儿方便，吓得我又逃回了大街。就这样，我拉着个行李箱，在大街小巷中脚步匆匆，逃也似的去到了在火车站不远处预定的房间。</p><p>在房间里，定了定神后，为刚刚的不安全感笑了起来。晚饭稍微吃了点沙拉，积攒了一天的疲惫从脚底冒到头顶，先睡吧。明天才是正式和罗马见面的日子呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一&lt;/p&gt;
&lt;p&gt;万事开头难。前后准备了一个多月，也无法提笔写下第一篇。总觉得，自己不论是文笔上还是内容上都没有准备好，还需要看更多的书，积累更多的素材，才能雕琢出理想中的作品。过度的完美主义，阻止了行动的启动。还好，偶然读到村上春树的《远方的鼓声》，那是他在中年时期旅居欧</summary>
      
    
    
    
    <category term="Literature" scheme="https://fuguigui.github.io/categories/Literature/"/>
    
    
    <category term="Travel" scheme="https://fuguigui.github.io/tags/Travel/"/>
    
    <category term="Europe" scheme="https://fuguigui.github.io/tags/Europe/"/>
    
  </entry>
  
  <entry>
    <title>Proto和thrift</title>
    <link href="https://fuguigui.github.io/proto/"/>
    <id>https://fuguigui.github.io/proto/</id>
    <published>2024-09-01T22:36:56.680Z</published>
    <updated>2024-09-01T22:36:56.680Z</updated>
    
    <content type="html"><![CDATA[<p>工作之后，接触了一个概念叫做RPC（remote procedure call），远程服务调用。对于大型工程来说，很多功能的实现都是通过RPC来实现的，从某种角度RPC可以类比为函数调用，但是从本地变成了远程。这就涉及到通信的技术。先写个帖子分享我对于Thrift和Protobuf的理解和使用。</p><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>事情要从RPC通信说起。</p><p>一个正常的RPC过程可以分为以下几个步骤：</p><p><img src="./Proto/RPC.jpg" alt="RPC"></p><ol><li>本地的调用者（caller）client调用本地的client stub</li><li>client stub将参数打包成一个消息，然后发送这个消息。打包过程叫做marshalling</li><li>client所在的系统将消息通过网络传输发送给服务端server</li><li>server将收到的包传给server stub</li><li>server stub解析包，得到参数。解包过程也被叫做unmarshalling</li><li>server stub调用服务过程。返回的结果按照相反的步骤传给client。</li></ol><p>这里涉及到的重要组成：</p><ul><li>client客户端：服务的调用方。</li><li>server服务端：服务的真正提供者。这个Server并不是提供RPC服务器IP、端口监听的模块，而是远程服务方法的具体实现，其中的代码是最普通和业务相关的代码，甚至其接口实现类本身都不知道将被某一个RPC远程客户端调用。</li><li>Stub/Proxy：RPC框架中的“代理层”：负责处理打包/解析消息格式，网络传输协议，服务地址信息等。</li><li>Network Service：底层传输：可以是TCP或HTTP。</li></ul><p>为了实现RPC：有几个问题需要解决：</p><ul><li>函数调用时，数据结构的约定问题：客户端和服务端实现调用的接口须一致。</li><li>数据传输时，序列化和反序列化问题。</li><li>网络通信问题。</li></ul><p>后两者是网络传输信息中的问题。</p><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>Protobuf就是专门解决序列化和反序列化的问题的。Thrift也提供了这个功能，但它同时兼具RPC远程通信的功能，这一点是Protobuf不具备的。这里集中介绍序列化和反序列化。</p><p>序列化：就是将对象转化成字节序列的过程。</p><p>反序列化：就是将字节序列转化成对象的过程。</p><p>因为网络传输数据时，无法直接传输对象。所以，所有可在网络上传输的对象都必须是可序列化的。</p><h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><p>Protocol Buffers时Google开发的一种轻便高效的结构化数据存储格式，可以用于序列化。</p><p>优点：</p><ul><li>性能好：Protobuf以高效的二进制方式存储，比XML小3到10倍，速度快20到100倍</li><li>代码生成机制：根据数据文件自动生成结构体定义和相关方法的文件。比如A系统去调用B系统，因为A</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="www.cnblogs.com/xiangxiaolin/p/12712720.html">Protobuf通信协议</a></p><p><a href="https://developer.51cto.com/art/201906/597963.htm">51CTO</a></p><p><a href="www.eet-china.com/mp/a63366.html">长文图解Google的protobuf思考、设计、应用</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工作之后，接触了一个概念叫做RPC（remote procedure call），远程服务调用。对于大型工程来说，很多功能的实现都是通过RPC来实现的，从某种角度RPC可以类比为函数调用，但是从本地变成了远程。这就涉及到通信的技术。先写个帖子分享我对于Thrift和Prot</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Network" scheme="https://fuguigui.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Hexo环境配置</title>
    <link href="https://fuguigui.github.io/hexo1/"/>
    <id>https://fuguigui.github.io/hexo1/</id>
    <published>2024-09-01T22:36:56.678Z</published>
    <updated>2024-09-01T22:36:56.678Z</updated>
    
    <content type="html"><![CDATA[<p>这一系列分享如何使用Hexo搭建个人博客网站。</p><p>俗话说“跑程序一小时，配环境一整天”。</p><p>第一步就是要配置环境。这有一个<a href="https://hexo.io/zh-cn/docs/">官方教程</a>，供参考。其实只要环境配置好了，后续的操作都非常简单。</p><h1 id="工具总览"><a href="#工具总览" class="headerlink" title="工具总览"></a>工具总览</h1><p>我们使用以下的工具来维护博客：</p><ul><li>Typora</li><li>Git</li><li>Node.js, npm</li><li>hexo</li></ul><h1 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是用来管理/存储代码和部署网页的地方。</p><p>需要对git进行的操作</p><ul><li><p>安装git</p></li><li><p>配置git账户</p></li><li><p>从github上下载仓库，并日后进行维护。</p></li></ul><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>如何安装git，去网上搜索有很多现成的教程，这里就不赘述了。可参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰git安装教程</a></p><h3 id="配置git账户"><a href="#配置git账户" class="headerlink" title="配置git账户"></a>配置git账户</h3><ol><li>在本地生成密钥，把密钥添加到远端。这一步是为了将本地机器和远程账户进行链接。可以参考<a href="https://www.jianshu.com/p/6e1de95828a8">简书git基本配置</a></li></ol><p>疑难解答：</p><ul><li><p><input checked="" disabled="" type="checkbox">  .ssh/config文件是什么</p><p><a href="https://www.cnblogs.com/foohack/p/10027083.html">https://www.cnblogs.com/foohack/p/10027083.html</a></p></li><li><p><input checked="" disabled="" type="checkbox">  多个账户配置。注：如果电脑上有多个账户，且没有配置全局账户，以后的操作应该是对于每一个repo都要单独配置账户。</p></li></ul><p><a href="https://www.jianshu.com/p/fbbf6efb50ba">https://www.jianshu.com/p/fbbf6efb50ba</a></p><h3 id="GitHub-Pages连接"><a href="#GitHub-Pages连接" class="headerlink" title="GitHub Pages连接"></a>GitHub Pages连接</h3><p>若没有GitHub Pages，则需：</p><ol><li>在github上新建一个Github Pages仓库</li><li>配置仓库链接</li></ol><p>若已建立GitHub Pages，则只需：</p><ol><li>配置仓库链接</li></ol><h4 id="创建新GitHub-Pages（可选）"><a href="#创建新GitHub-Pages（可选）" class="headerlink" title="创建新GitHub Pages（可选）"></a>创建新GitHub Pages（可选）</h4><p>参考<a href="https://zhuanlan.zhihu.com/p/60578464">知乎：hexo和git配置</a></p><h4 id="配置仓库链接"><a href="#配置仓库链接" class="headerlink" title="配置仓库链接"></a>配置仓库链接</h4><p>如何将远程仓库下载到本地，并且配置用户？ <a href="https://www.cnblogs.com/yshang/p/11230209.html">cnblogs：将远程仓库下载到本地</a></p><ol><li><p>在本地新建一个文件夹</p></li><li><p>将本地仓库初始化<code>git init</code></p></li><li><p>将相应的代码从远程下载下来 <code>git clone git@github.com:gitacount/blogname.github.io.git</code></p></li><li><p>进入这个仓库的目录下，输入以下代码</p><p><code>git config --unset user.name</code></p><p><code>git config --unset user.email</code></p><p><code>git config user.name "GitAccount"</code></p><p><code>git config user.email gitemail@***.***</code></p></li></ol><p><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 对于GitHub Pages的仓库配置有个小技巧，就是<strong>使用两个分支</strong>，一个分支用于存储hexo渲染好的静态页面，也就是直接展示给读者的html等文件；另一个分支用于存储源代码，也就是hexo渲染前的文件，这样便于在多台机器上更新博客，或者更换机器后，直接从git上拉取下来就好。</p><p>详细教程请参考<a href="https://haoshuai6.github.io/2016-10-28-hexo-github.html">haoshuai6: hexo两个分支</a></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>我喜欢使用这个markdown文本编辑器。</p><p>Typora比一般markdown编辑器好的地方是：即时展现。也就是它的界面展现给你的就是已经渲染好效果的版本，而不是原始版本的所有字符输入。</p><p>原始版本是什么样呢？在键盘上按下<code>Ctrl+/</code>就能看见了。再按一次<code>Ctrl + /</code>就可以返回展示界面。    </p><p>Typora的左侧可以把文章的结构展现出来，而且Typora可以很方便地把markdown导出为pdf或者html等多种结构。在左上角菜单栏里有一个导出（Export）。</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>markdown类型的文本后缀是.md，是一种文本标记语言。常见于代码仓库的readme文件。长处在于减少排版工作，支持方便输入数学公式，代码，引用，表情包等日常需求。</p><ul><li><a href="https://www.jianshu.com/p/335db5716248">简书：Markdown基础教程</a></li><li><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji-cheat-sheet</a></li></ul><p>类似的文件类型还有.rst。</p><ul><li><p><a href="https://www.cnblogs.com/youxin/p/3597229.html">cnblogs: markdown vs rst</a></p></li><li><p><a href="https://www.jianshu.com/p/1885d5570b37">简书: rst introduction</a></p></li></ul><p>hexo可以直接将markdown类型的文本转化为html类型，用做网页。</p><h2 id="Node-js和npm"><a href="#Node-js和npm" class="headerlink" title="Node.js和npm"></a>Node.js和npm</h2><p>node.js的简单解释是一种javascript的运行环境，能够使得javascript脱离浏览器运行。</p><p>npm(<strong>n</strong>odejs <strong>p</strong>ackage <strong>m</strong>anager)简单说就是nodejs内置的包管理器。可以理解为anaconda之于python的地位。将npm类比为anaconda，nodejs类比为python</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">runoob: nodejs安装配置windows/Linux/Mac</a></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><a href="https://hexo.io/zh-cn/docs/">hexo</a>是一个博客框架，能将markdown格式的文件解析生成静态网页。</p><p>hexo据说是一个二次元的台湾小哥写的。这里是<a href="https://zespia.tw/blog/2012/10/11/hexo-debut/">Hexo诞生的介绍</a>。小哥是在玩前端的时候，对现有的博客框架很不满意，于是就自己写了一个。。。。（大佬就是任性，遇到不喜欢的东西就自己写一个。。。类似的故事还有git，linux，latex，matlab等等。我深深地被小哥任性的初衷吸引了，非常种草这个框架。）</p><p>安装参考官方文档。</p><p>之后就可以去选择自己喜欢的主题，进行写作和装饰啦。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方安装教程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰git安装教程</a></li><li><a href="https://www.jianshu.com/p/6e1de95828a8">简书git基本配置</a></li><li><a href="https://www.cnblogs.com/foohack/p/10027083.html">cnblogs: ssh</a></li><li><a href="https://www.jianshu.com/p/fbbf6efb50ba">简书：Git多账户配置</a></li><li><a href="https://zhuanlan.zhihu.com/p/60578464">知乎：hexo和git配置</a></li><li><a href="https://haoshuai6.github.io/2016-10-28-hexo-github.html">haoshuai6: hexo两个分支</a></li><li><a href="https://www.jianshu.com/p/335db5716248">简书：Markdown基础教程</a></li><li><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji-cheat-sheet</a></li><li><a href="https://www.cnblogs.com/youxin/p/3597229.html">cnblogs: markdown vs rst</a></li><li><a href="https://www.jianshu.com/p/1885d5570b37">简书: rst introduction</a></li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">runoob: nodejs安装配置windows/Linux/Mac</a></li><li><a href="https://hexo.io/zh-cn/docs/">hexo官方介绍</a></li><li><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/">Hexo的诞生</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一系列分享如何使用Hexo搭建个人博客网站。&lt;/p&gt;
&lt;p&gt;俗话说“跑程序一小时，配环境一整天”。&lt;/p&gt;
&lt;p&gt;第一步就是要配置环境。这有一个&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;官方教程&lt;/a&gt;，供参考。其实只要环境配置好了，后续</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Hexo" scheme="https://fuguigui.github.io/tags/Hexo/"/>
    
    <category term="Git" scheme="https://fuguigui.github.io/tags/Git/"/>
    
    <category term="Markdown" scheme="https://fuguigui.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Blog TODO</title>
    <link href="https://fuguigui.github.io/todo/"/>
    <id>https://fuguigui.github.io/todo/</id>
    <published>2023-12-31T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h1><ul><li><input disabled="" type="checkbox"> view count is wrong</li></ul><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul><li>multiple languages: automatically translate</li></ul><h2 id="功能排查"><a href="#功能排查" class="headerlink" title="功能排查"></a>功能排查</h2><ul><li><p><input disabled="" type="checkbox">  移除git repo的子目录里的git</p></li><li><p><input disabled="" type="checkbox">  足迹地图<a href="https://zhuanlan.zhihu.com/p/338156645">https://zhuanlan.zhihu.com/p/338156645</a></p></li><li><p><input disabled="" type="checkbox">  bilibili视频<a href="https://zhuanlan.zhihu.com/p/194208325">https://zhuanlan.zhihu.com/p/194208325</a></p></li><li><p><input disabled="" type="checkbox">  大规模修改post链接</p></li><li><p><input disabled="" type="checkbox">  如何进行自适应的中英文调整？ <a href="https://tstrs.me/1448.html">https://tstrs.me/1448.html</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/hexo <span class="token operator">&amp;&amp;</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span><span class="token function">cd</span> /root/hexoen <span class="token operator">&amp;&amp;</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> /root/hexo <span class="token operator">&amp;&amp;</span><span class="token function">cp</span> -r /root/hexoen/public/. /root/hexo/public/en/ <span class="token operator">&amp;&amp;</span> hexo d</code></pre></li></ul><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ul><li><input disabled="" type="checkbox"> 更新myprojects</li><li><input disabled="" type="checkbox"> 自我介绍更新</li><li><input disabled="" type="checkbox"> 添加好友：<a href="https://tstrs.me/en/about/">https://tstrs.me/en/about/</a> 这个人，启发了我创作英文版的</li></ul><h1 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h1><ul><li><input disabled="" type="checkbox"> math formula in posts<ul><li><input disabled="" type="checkbox"> from CIL-7CNN</li></ul></li><li><input disabled="" type="checkbox"> images missing in posts<ul><li><input disabled="" type="checkbox"> CIL1-LA: ./imgs/2pca_1.png)</li><li><input disabled="" type="checkbox"> CIL2-MA: ./imgs/2nn_4.png, ./imgs/2nn_1.png) , ./imgs/2nn_2.png) ./imgs/2nn_3.png</li></ul></li><li><input disabled="" type="checkbox"> how to insert images</li><li><input disabled="" type="checkbox"> images for covers</li><li><input disabled="" type="checkbox"> post reference</li></ul><h1 id="More-contents"><a href="#More-contents" class="headerlink" title="More contents"></a>More contents</h1><ul><li><input disabled="" type="checkbox"> traveling</li><li><input disabled="" type="checkbox"> food</li><li><input disabled="" type="checkbox"> thoughts</li><li><input disabled="" type="checkbox"> Links: for the other blog</li><li><input disabled="" type="checkbox"> Recommendations</li><li><input disabled="" type="checkbox"> maps</li><li><input disabled="" type="checkbox"> summer journal</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bugs&quot;&gt;&lt;a href=&quot;#Bugs&quot; class=&quot;headerlink&quot; title=&quot;Bugs&quot;&gt;&lt;/a&gt;Bugs&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; view count is wrong&lt;</summary>
      
    
    
    
    <category term="misc" scheme="https://fuguigui.github.io/categories/misc/"/>
    
    
    <category term="blog" scheme="https://fuguigui.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Google上岸算法刷题计划表</title>
    <link href="https://fuguigui.github.io/20220501-shu-ju-jie-gou/"/>
    <id>https://fuguigui.github.io/20220501-shu-ju-jie-gou/</id>
    <published>2022-06-05T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><p><strong>重点散列表</strong>：总结各种巧妙的应用，以及利用了散列表什么样的特点</p></li><li><p><input checked="" disabled="" type="checkbox">  栈和队列的使用，python包的使用</p></li><li><p><input checked="" disabled="" type="checkbox">  堆系统性学习</p></li><li><p><input checked="" disabled="" type="checkbox">  排序算法总结 （05/16）</p><ul><li><input checked="" disabled="" type="checkbox"> 排序算法，经典算法的要点在于什么？</li><li><input checked="" disabled="" type="checkbox"> 排序算法刷题</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  搜索/二分搜索（05/20）</p></li><li><p><input checked="" disabled="" type="checkbox">  树：实现下，前中后序遍历 （05/21-05/28）</p><ul><li><input checked="" disabled="" type="checkbox"> 广搜深搜总结错题集 </li><li><input checked="" disabled="" type="checkbox"> 线段树</li><li><input checked="" disabled="" type="checkbox"> dfs+memo</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  图：实现 </p><ul><li><input checked="" disabled="" type="checkbox"> topology sort</li></ul></li><li><p><input checked="" disabled="" type="checkbox">  递归/动态规划，区分不同，以及重点题目总结 </p></li><li><p><input checked="" disabled="" type="checkbox">  链表和数组 </p></li><li><p><input checked="" disabled="" type="checkbox">  双指针</p></li><li><p><input checked="" disabled="" type="checkbox">  贪心</p></li><li><p><input checked="" disabled="" type="checkbox">  内存作为新知识点进行学习</p></li><li><p><input checked="" disabled="" type="checkbox">  位操作的应用实例</p></li><li><p><input checked="" disabled="" type="checkbox">  专项总结：这个topic的典型应用场景有哪些？模板是什么？精选例题+每道题可以怎样follow up？</p><ul><li><input checked="" disabled="" type="checkbox"> 不同场景降低时间复杂度的方法有哪些 </li></ul></li><li><p><input checked="" disabled="" type="checkbox">  谷歌专项刷题：先说不做，把所有该说的都说完，想follow up，和behaviro的准备同时进行，穿插着来</p></li><li><p><input checked="" disabled="" type="checkbox">  labuladong每个专题刷典型题</p></li></ul><p>务必掌握它们的具体用法、实现方法、应用场景以及时间和空间复杂度</p><p>各种数据结构：重要的一点是使用：适用于什么场景，时间空间复杂度是什么？典型的应用有哪些。一定要弄清楚什么情况下该使用什么数据结构。</p><table><thead><tr><th>数据结构</th><th>算法</th><th>其他</th></tr></thead><tbody><tr><td>链表：双指针</td><td>广度优先搜索</td><td>位操作</td></tr><tr><td>树、二叉树、单词查找树，segment tree</td><td>深度优先搜索</td><td>内存（堆和栈）</td></tr><tr><td>栈和队列</td><td>二分查找</td><td>LRUCache、LFUCache</td></tr><tr><td>堆</td><td>排序：快排，归并，桶</td><td>大o时间和空间</td></tr><tr><td>向量/数组列表/字符串</td><td>分治法</td><td>并查集</td></tr><tr><td>散列表</td><td>滑动窗口</td><td>面向对象设计</td></tr><tr><td>图</td><td>贪心算法</td><td>系统设计与可扩展性</td></tr><tr><td></td><td>动态规划、递归</td><td>线程与锁</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://books.halfrost.com/leetcode/ChapterTwo/Stack/">LeetCode Cookbook</a>（数据结构+算法）</p></li><li><p><a href="https://github.com/changgyhub/leetcode_101">GitHub - LeetCode 101</a>（侧重于算法）</p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488290&amp;idx=1&amp;sn=a9c525e36211710e0ff480e3300e346b&amp;chksm=fd9cb83dcaeb312b004aff26e5448bf7f77a318efab4637c33f52edd2c9e4d8b4cc3b4a63e2c&amp;cur_album_id=1751702161341628417&amp;scene=189#wechat_redirect">宫水三叶</a></p></li><li><p><a href="https://dowalle.gitbook.io/algo/algorithm/4-tu-lun/1-ji-ben-zhi-shi">dowalle</a></p></li><li><p><a href="https://labuladong.github.io/algo/3/23/71/">labuladong</a></p></li><li><p>程序员面试金典（数据结构+算法）</p></li></ul><h1 id="笔记链接"><a href="#笔记链接" class="headerlink" title="笔记链接"></a>笔记链接</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%95%A3%E5%88%97%E8%A1%A8Hash.ipynb">散列表</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%9A%E6%A0%88%EF%BC%89.ipynb">栈和队列（一：栈）</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%9A%E9%98%9F%E5%88%97%EF%BC%89.ipynb">栈和队列（二：队列）</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E5%A0%86.ipynb">堆</a></p><p><a href="2022-05-16%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.md">排序算法理论</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.ipynb">排序算法力扣</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.ipynb">二分搜索</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%A0%91%E5%92%8C%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%9A%E6%A0%91%EF%BC%89.ipynb">树和图（一：树）</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%A0%91%E5%92%8C%E5%9B%BE%EF%BC%88%E4%BA%8C%EF%BC%9A%E6%A0%91%E7%9A%84%E8%BF%9B%E9%98%B6%EF%BC%89.ipynb">树和图（二：树的进阶）</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E6%A0%91%E5%92%8C%E5%9B%BE%EF%BC%88%E4%B8%89%EF%BC%9A%E5%9B%BE%EF%BC%89.ipynb">树和图（三：图）</a></p><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.ipynb">动态规划</a></p><h2 id="专题"><a href="#专题" class="headerlink" title="专题"></a>专题</h2><p><a href="https://github.com/fuguigui/leetcode-notes/blob/master/%E4%B8%93%E9%A2%98BFS%E5%92%8CDFS.ipynb">专题BFS和DFS</a></p><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>python的字典复制，有几种方法，复制程度不一样</p><p><a href="https://blog.csdn.net/u010895119/article/details/79418434">Python dictionary字典的复制方法_小桔帽的博客-CSDN博客_python复制字典</a></p><ul><li><p><code>dict1=dict2</code>，这个只是换个名字而已，并不能叫复制，对<code>dict1</code>做的操作，都会出现在<code>dict2</code>上</p></li><li><p><code>dict1=dict2.copy()</code>，这个是浅复制：复制后对原dict的内部子对象(方括号[]内元素)进行操作时，由浅复制得到的dict<strong>会</strong>受该操作影响</p><ul><li><p><code>dict1[a]=3</code>不会影响到<code>dict2[a]</code>的值</p></li><li><p><code>dict1[a].append(3)</code>会影响到<code>dict2[a]</code>的值</p></li></ul></li><li><p><code>dict1=deepcopy(dict2)</code>，这个是深复制：复制后对原dict的内部子对象(方括号[]内元素)进行操作时，由深复制得到的dict<strong>不会</strong>受该操作影响</p><ul><li><p><code>dict1[a]=3</code>不会影响到<code>dict2[a]</code>的值</p></li><li><p><code>dict1[a].append(3)</code>不会影响到<code>dict2[a]</code>的值</p></li></ul></li><li><p><input checked="" disabled="" type="checkbox">  python的sortedlist怎么使用？</p></li></ul><p>一个demo</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sortedcontainers <span class="token keyword">import</span> SortedList<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countSmaller</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        sl <span class="token operator">=</span> SortedList<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 反向遍历</span>            cnt <span class="token operator">=</span> sl<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 找到右边比当前值小的元素个数</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt                    <span class="token comment" spellcheck="true"># 记入答案</span>            sl<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 将当前值加入有序数组中</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;重点散列表&lt;/strong&gt;：总结各种巧妙的应用，以及利用了散列表什么样的特点&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Algorithm" scheme="https://fuguigui.github.io/tags/Algorithm/"/>
    
    <category term="Coding" scheme="https://fuguigui.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://fuguigui.github.io/2022-05-16-pai-xu-suan-fa-md/"/>
    <id>https://fuguigui.github.io/2022-05-16-pai-xu-suan-fa-md/</id>
    <published>2022-05-16T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">1.0 十大经典排序算法 | 菜鸟教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/42586566">知乎-十大经典排序算法</a></p><p><img src="sort1.png"></p><p><img src="sort2.png"></p><table><thead><tr><th>sorting algorithm</th><th>English Name</th><th>how</th><th>general rule</th><th>best case</th><th>worst case</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/w3cnote/bubble-sort.html">冒泡排序 </a></td><td>bubble sort</td><td>比较相邻两个元素，如果逆序就交换；接着比较下一对相邻两个元素。循环两次，外层循环结尾不断缩短。</td><td>只是作为一种知识来了解，很少有实际应用？？？<br><strong>适合小数据</strong></td><td>O(n)<br>ordered</td><td>O(n^2)<br>anti-ordered</td></tr><tr><td>选择排序</td><td>selection sort</td><td>选择当前最小的元素，放到已经排序好的末尾</td><td>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，<strong>数据规模越小越好</strong>。唯一的好处可能就是不占用额外的内存空间了吧。</td><td>O(n^2)都一样</td><td>O(n^2)都一样</td></tr><tr><td>插入排序</td><td>insertion sort</td><td>扑克牌打法：对于未排序数据，在已排序序列从后向前扫描，找到相应位置并插入。</td><td>插入排序由于O( n2 )的复杂度，<strong>在数组较大的时候不适用。但是，在数据比较少的时候，是一个不错的选择</strong>，一般做为快速排序的扩充。例如，在STL的sort算法和stdlib的qsort算法中，都将插入排序<strong>作为快速排序的补充</strong>，用于少量元素的排序。又如，在JDK 7 java.util.Arrays所用的sort方法的实现中，当待排数组长度小于47时，会使用插入排序。</td><td>O(n)<br>ordered</td><td>O(n^2)<br>anti-ordered</td></tr><tr><td>堆排序</td><td>heapsort</td><td>使用堆这个数据结构来排序</td><td>堆排序在建立堆和调整堆的过程中会产生比较大的开销，在元素少的时候并不适用。但是，<strong>在元素比较多</strong>的情况下，还是不错的一个选择。尤其是在解决诸如“前n大的数”一类问题时，几乎是首选算法。</td><td>O(nlogn)都一样</td><td>O(nlogn)都一样</td></tr><tr><td>快排</td><td>quicksort</td><td>分治法，选择一个基准，把小于这个基准的放在左边，大于这个基准的放在右边</td><td>快速排序对于<strong>大数据的优秀排序性能</strong>和相同复杂度算法中相对简单的实现使它注定得到比其他算法更多的宠爱。<br>快速排序在大多数情况下都是适用的，尤其在数据量大的时候性能优越性更加明显。但是在必要的时候，需要考虑下优化以提高其在最坏情况下的性能。</td><td>O(n)<br>当顺序的时候</td><td>O(n^2)<br>当逆序的时候</td></tr><tr><td>归并排序</td><td>merge sort</td><td>分治思想<br>将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。</td><td>归并排序<strong>在数据量比较大</strong>的时候也有较为出色的表现（效率上），但是，其<strong>空间复杂度O(n)</strong> 使得在数据量特别大的时候（例如，1千万数据）几乎不可接受。而且，考虑到有的机器内存本身就比较小，因此，采用归并排序一定要注意。</td><td>O(nlogn)都一样</td><td>O(nlogn)都一样</td></tr><tr><td>计数排序</td><td>Bucket Sort/ Bin sort</td><td>核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序</td><td>要求输入的数据必须是有确定范围的整数。</td><td>O(n+k)都一样</td><td>O(n+k)都一样</td></tr><tr><td>基数排序</td><td>Radix Sort</td><td>将整数按位数切割成不同的数字，然后按每个位数分别比较。</td><td>基数排序要求较高，元素必须是整数，整数时长度10W以上，最大值100W以下效率较好，但是基数排序比其他排序好在可以适用字符串，或者其他需要根据多个条件进行排序的场景，例如日期，先排序日，再排序月，最后排序年 ，其它排序算法可是做不了的。</td><td>O(n*k)都一样</td><td>O(n*k)都一样</td></tr></tbody></table><ul><li><input checked="" disabled="" type="checkbox"> python内置的sort使用的是什么</li></ul><p><a href="https://blog.csdn.net/u010883226/article/details/84403263">Python里sort（）的排序算法–Timsort简介_山水无间道的博客-CSDN博客_python sort排序算法</a>Tim排序，是一种合并排序和插入排序的结合体。</p><ul><li><p>在排序长度<strong>低于64</strong>的时候采取：插入排序 。</p></li><li><p><strong>高于64</strong>的时候采取一种改良的归并排序。查找升序和降序的部分（Run），进行反转/合并</p></li><li><p><input checked="" disabled="" type="checkbox">  选择排序为什么是不稳定的？</p></li></ul><p><a href="https://blog.csdn.net/xiaolangmin/article/details/88538446">理解选择排序的不稳定性_小黄鸭zm的博客-CSDN博客_选择排序为什么不稳定</a></p><p>假设nums[0] == nums[1] &gt; nums[2] </p><p>交换之后是nums[2], nums[1], nums[0]。原来下标为0和1的顺序被破坏了</p><h1 id="排序算法之间的比较"><a href="#排序算法之间的比较" class="headerlink" title="排序算法之间的比较"></a>排序算法之间的比较</h1><p>应用最广泛的是快排</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序/逆序数列的快排。但它的平摊期望时间是 O(nlogn)。对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>为什么不是归并排序？</p><ul><li><p>快排O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。</p></li><li><p>归并排序在任何情况下的时间复杂度都是O(nlogn)，但是归并排序不是原地排序的，需要借助<strong>额外的存储空间</strong>。</p></li><li><p>归并排序的空间复杂度为什么是O(n)，而不是O(nlogn)？因为递归代码的<code>空间复杂度</code>并不能像<code>时间复杂度</code>那样累加，尽管每次合并操作都需要申请额外的内存空间，但在合并完成之后，临时开辟的内存空间就被释放掉了。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。<code>临时内存空间最大也不会超过 n 个数据的大小，所以空间复杂度是 O(n)</code>。<a href="https://blog.csdn.net/u010711495/article/details/117378617">归并排序的空间复杂度_鸭梨山大哎的博客-CSDN博客_归并排序空间复杂度</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/ten-sorting-algorithm.html&quot;&gt;1.</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Algorithm" scheme="https://fuguigui.github.io/tags/Algorithm/"/>
    
    <category term="Coding" scheme="https://fuguigui.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>Weekly summary</title>
    <link href="https://fuguigui.github.io/y2022w1-summary/"/>
    <id>https://fuguigui.github.io/y2022w1-summary/</id>
    <published>2022-01-09T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>2022年的第一周。</p><p>今天最大的愿望是好好经营自己的生活，善待自己了解自己。</p><p>这一周结束了一段维持四年的关系。有很多的不舍，但是我不能用爱情来掩盖不合适。逐渐明白了一个道理，不是有爱情就一定会幸福，恋爱不等于婚姻。当个人能量在一段爱情中不断被消耗时，需要及时止损。没有任何的对不起。我不会再向过去一样幼稚，试图丢掉这段时间的信物，以为能借此丢掉回忆。反之，我很感激这一段经历，在双方的青春里留下了一段美丽的过往。我会好好珍惜，从中汲取面对未来的勇气。</p><p>谢谢你，元元。祝各自幸福。</p><p>新的一周，职业上面临着业务调整。入职以来在做的产品，很可能会被别的组收走。我没啥遗憾，这本就是一个熟悉工作技能的机会，于我，目的已经达到了。接下来，就认真欢迎新的工作内容吧！</p><p>本周见到了小启凡，七哥，和元元最后一次视频，和姐姐打了将近三个小时的电话。开始逛起了Github，有些内容哟。</p><p>平淡度日，冷暖自知。</p><h1 id="计划回顾"><a href="#计划回顾" class="headerlink" title="计划回顾"></a>计划回顾</h1><p>工作技能</p><ul><li><p><input checked="" disabled="" type="checkbox">  总结了工作中遇到的有意思的算法</p></li><li><p><input checked="" disabled="" type="checkbox">  《改变未来的九大算法》，听书到第十章：什么是可计算？</p><p>养生/健身：</p></li><li><p><input checked="" disabled="" type="checkbox">  周三：T25 Gamma Pyramid, House</p></li><li><p><input checked="" disabled="" type="checkbox">  周五：复习舞蹈，Urban</p></li><li><p><input checked="" disabled="" type="checkbox">  周六周日：Hiphop集训课</p><p>影视</p></li><li><p><input checked="" disabled="" type="checkbox">  《本杰明巴顿奇事》</p></li><li><p><input checked="" disabled="" type="checkbox">  《婚姻故事》</p><p>写作</p></li><li><p><input checked="" disabled="" type="checkbox">  罗马：台伯河畔</p><p>读书</p></li><li><p><input checked="" disabled="" type="checkbox">  林徽因的故事</p><p>德语：</p></li><li><p><input checked="" disabled="" type="checkbox">  B1 Vokabel mit Top Thema</p></li></ul><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><p>工作技能</p><ul><li><input disabled="" type="checkbox"> 《黑客与画家》阅读一章</li></ul><p>养生/健身</p><ul><li><input disabled="" type="checkbox"> 坚持饮食减重计划，本周的目标是减少400g</li><li><input disabled="" type="checkbox"> 周一：T25 gamma上半身阻力</li><li><input disabled="" type="checkbox"> 周二：Bodycombat</li><li><input disabled="" type="checkbox"> 周三：House</li><li><input disabled="" type="checkbox"> 周四：复习Hiphop和House</li><li><input disabled="" type="checkbox"> 周五：Urban</li><li><input disabled="" type="checkbox"> 周六：Locking</li><li><input disabled="" type="checkbox"> 周日：House + Locking</li></ul><p>影视</p><ul><li><input disabled="" type="checkbox"> 《七宗罪》（最近是大卫分奇的粉）</li></ul><p>写作</p><ul><li><input disabled="" type="checkbox"> 罗马：第一顿午饭</li></ul><p>读书</p><ul><li><input disabled="" type="checkbox"> 林徽因看完</li><li><input disabled="" type="checkbox"> 优雅的艺术</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022年的第一周。&lt;/p&gt;
&lt;p&gt;今天最大的愿望是好好经营自己的生活，善待自己了解自己。&lt;/p&gt;
&lt;p&gt;这一周结束了一段维持四年的关系。有很多的不舍，但是我不能用爱情来掩盖不合适。逐渐明白了一个道理，不是有爱情就一定会幸福，恋爱不等于婚姻。当个人能量在一段爱情中不断被消耗</summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="Life" scheme="https://fuguigui.github.io/tags/Life/"/>
    
    <category term="Work" scheme="https://fuguigui.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>该长大了</title>
    <link href="https://fuguigui.github.io/gai-chang-da-liao/"/>
    <id>https://fuguigui.github.io/gai-chang-da-liao/</id>
    <published>2022-01-03T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.664Z</updated>
    
    <content type="html"><![CDATA[<p>2022年刚到的那一刻，脑子像被棒槌突然敲了一下。</p><p>我该长大了，在25岁的尾巴上。</p><p>这几天一直在思考自己过去几年的生活，得出的核心结论是：自我是混乱的。我没能准确定位自己想要什么，一直在不停地忙碌，却没有明确的方向。职业上差强人意，情感上一塌糊涂。在两团混乱间，还是先拣小的来理吧。</p><p>职业上差强人意。现在的工作内容，我整体上是满意的。但多多少少有些不甘心。为什么？没有大的title，没有令人满意的时薪，没有大的创造性输出，一直是个打工仔。我想要什么？我想去Google，为什么？工资高，名字响亮，可以去别的国家体验不一样的生活。那就不是打工仔了吗？那就会有更大的创造性了吗？不会，但是会更早地实现经济自由。OK，所以我最终的需求里，更重要的到底是创造性还是经济自由？这两者其实并不矛盾，说到底都是自由，自己支配时间和劳动的自由。我很着急实现这样的自由吗？不见得。虽然马上26岁了，但平心而论，自己的职业技能又有多高呢？我值得我理想中的薪资吗？我的能力和我的愿望匹配吗？</p><p>没有。那就先努力提升自己的能力啊，而不是预先烦恼该选择什么样的工作。等话语权到了自己的手上，再去谈条件。我未来想要什么样的生活？我想要去瑞士生活，贴近大自然和平静。瑞士哪里好？中国的互联网现代化等很多方面，其实远超瑞士。但是瑞士人有闲，有对自我追求的自由。“闲”，应该成为衡量生活的一个标尺吧。</p><p>情感上，从何说起呢？近来最深刻的认知是，“要好好爱自己”。</p><p>说起来是很简单的一句话。我也是最近才深刻地认识到，其实，我一直以来都没认为自己是值得好好疼爱的。这种认知来自于原生家庭。我不是被爸爸宠大的，而是苦大的，导致我内心里认为，吃苦比撒娇更美。这一点，在整个社会的衡量体系里，或许是被认可鼓励的。但是，从女人自身的角度，绝不是。当我静下心来，观察周围人的情感生活时，才发现人世间的幸与不幸竟有天壤之别。互相滋养的爱情是多么令人渴求，而多少人又陷入了无休止的双婚姻损耗中。去年这一年，经历了很多人事变故。同学的妈妈意外去世，疼爱我的舅妈情况恶化，妈妈的身体也出了诸多毛病。有多少是个人原因，又有多少是生活的消磨。</p><p>老话说，女孩要富养。这不是说，养女孩就是要培养一个个娇气的小公主。而是，让女孩不要太轻易被别人的示好所感动，要聪明，要知道如何考察一个人。</p><p>你是什么样的人，决定了你会遇到什么样的人。</p><p>此言甚是。我遇到的感情很好地契合了我的气质。而当我逐渐发现，自我损耗不断进行时，不是对方的错，而是自我的定位问题。如果我不改变自己的认知，就永远跳不出自我消耗的怪圈。</p><p>醒醒吧，该长大了。</p><p>2022，最大的愿望，是爱自己，从重塑自己开始。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022年刚到的那一刻，脑子像被棒槌突然敲了一下。&lt;/p&gt;
&lt;p&gt;我该长大了，在25岁的尾巴上。&lt;/p&gt;
&lt;p&gt;这几天一直在思考自己过去几年的生活，得出的核心结论是：自我是混乱的。我没能准确定位自己想要什么，一直在不停地忙碌，却没有明确的方向。职业上差强人意，情感上一塌糊涂</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Weekly summary</title>
    <link href="https://fuguigui.github.io/y2021wd2-summary/"/>
    <id>https://fuguigui.github.io/y2021wd2-summary/</id>
    <published>2021-12-26T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划回顾"><a href="#计划回顾" class="headerlink" title="计划回顾"></a>计划回顾</h1><ul><li><input disabled="" type="checkbox"> 工作技能<ul><li><input disabled="" type="checkbox"> 继续总结《秒懂设计模式》（没做）</li><li><input checked="" disabled="" type="checkbox"> 周二C++学习继续</li><li><input checked="" disabled="" type="checkbox"> 《黑客与画家》看完两章</li></ul>养生/健身：<ul><li><input disabled="" type="checkbox"> 控制住核桃的食用量哦，每天不超过6颗好吧（超过了。。。嘤）</li><li><input checked="" disabled="" type="checkbox"> 周一：复习舞蹈</li><li><input checked="" disabled="" type="checkbox"> 周二：body combat</li><li><input checked="" disabled="" type="checkbox"> 周四：T25 gamma4</li><li><input checked="" disabled="" type="checkbox"> 周五：T25 gamma 5</li><li><input checked="" disabled="" type="checkbox"> 周日：House-&gt;改成了一节Hiphop和Locking</li></ul>影视<ul><li><input checked="" disabled="" type="checkbox"> 《社交网络》-〉改成了东方列车谋杀案</li></ul>写作：<ul><li><input checked="" disabled="" type="checkbox"> 在罗马的第一天</li></ul>德语：<ul><li><input checked="" disabled="" type="checkbox"> 第五篇</li><li><input checked="" disabled="" type="checkbox"> 第六篇</li></ul></li></ul><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>本周没有大的事件。在工作上，所做的产品在接下来的一年可能面临着重大定位变革，所以最近在忙于总结性的工作。挺享受这样的过程的，一直忙碌反而没时间从大局上看看自己都干了什么，停下来总结下，反而有利于自己对工作的整体把握。</p><p>早起，真的觉得一天都变长了。可以干很多的事情。清了清自己的喜马拉雅，发现一个收藏了很久的听书节目《改变世界的九大算法》，内容很棒，我居然一直没听，差点错过。周六是圣诞节，约了几个小伙伴来家里玩耍，新室友也在这一天搬了进来，相处得很愉快。豆包最近在姨妈期，很是敏感，不再是原来的小可爱了。</p><p>这周看了《东方列车谋杀案》，一个典型的剧本杀式电影，我觉得比较有意思的一点是，车上来自欧洲不同国家的人说话的口音。</p><p>又快到年底了，我最喜欢的整理和立flag时间又到啦！回顾了下自己这几个月跳的舞，发现上的街舞课没有想象中的多，但是进步是很明显滴！这一点让我非常开心。要把自己学习街舞的过程记录下来哇～</p><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><p>工作技能</p><ul><li><input disabled="" type="checkbox"> 继续总结《秒懂设计模式》</li><li><input disabled="" type="checkbox"> 《黑客与画家》看完第五章《另一条路》和第六章《如何创造财富》</li></ul><p>养生/健身：</p><ul><li><input disabled="" type="checkbox"> 控制住核桃的食用量哦，每天不超过6颗好吧</li><li><input disabled="" type="checkbox"> 周一：T25 gamma上半身阻力训练</li><li><input disabled="" type="checkbox"> 周二：T25gamma极限循环+body combat</li><li><input disabled="" type="checkbox"> 周三：T25gamma速度训练3.0House</li><li><input disabled="" type="checkbox"> 周四：Locking学习</li><li><input disabled="" type="checkbox"> 周五：T25 gamma金字塔训练</li></ul><p>影视</p><ul><li><input disabled="" type="checkbox"> 《搏击俱乐部》</li></ul><p>写作：</p><ul><li><input disabled="" type="checkbox"> 在罗马的第一天继续</li></ul><p>德语：</p><ul><li><input disabled="" type="checkbox"> 第七篇</li><li><input disabled="" type="checkbox"> 第八篇</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计划回顾&quot;&gt;&lt;a href=&quot;#计划回顾&quot; class=&quot;headerlink&quot; title=&quot;计划回顾&quot;&gt;&lt;/a&gt;计划回顾&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 工作技能&lt;ul&gt;
&lt;li&gt;&lt;input </summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="Life" scheme="https://fuguigui.github.io/tags/Life/"/>
    
    <category term="Work" scheme="https://fuguigui.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Weekly summary</title>
    <link href="https://fuguigui.github.io/y2021wd3-summary/"/>
    <id>https://fuguigui.github.io/y2021wd3-summary/</id>
    <published>2021-12-19T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划回顾"><a href="#计划回顾" class="headerlink" title="计划回顾"></a>计划回顾</h1><p>工作技能</p><ul><li><input checked="" disabled="" type="checkbox"> 总结《秒懂设计模式》这本书（总结了一部分）</li><li><input disabled="" type="checkbox"> 安排新一轮的阅读/学习计划：<ul><li>中午/空闲的时候阅读：《黑客与画家》，《Vim实用技巧》</li><li>C++每周二晚上专项学习：《C++ Primer》，《C++语言的设计和演化》</li><li>每周四晚上专项学习：《程序员面试金典》，《程序员修炼之道：从 小工到专家》，《编程珠玑》</li></ul></li></ul><p>养生/健身：</p><ul><li><input checked="" disabled="" type="checkbox"> 下一周都在10点半前睡觉叭</li><li><input checked="" disabled="" type="checkbox"> 不要暴饮暴食，要清淡饮食哦</li><li><input checked="" disabled="" type="checkbox"> 周三：T25 gamma1</li><li><input checked="" disabled="" type="checkbox"> 周五：T25 gamma2</li></ul><p>影视</p><ul><li><input checked="" disabled="" type="checkbox"> 消失的爱人</li></ul><p>写作：</p><ul><li><input checked="" disabled="" type="checkbox"> 继续在去罗马的路上，争取抵达罗马。</li></ul><p>德语：</p><ul><li><input checked="" disabled="" type="checkbox"> Tief Ahmet und Hoch Bezena（没有完成）</li><li><input checked="" disabled="" type="checkbox"> 第四篇哦</li></ul><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>上周给自己规划的内容，基本上都做完了呢。周二中午去参加公司的一个读书会，《沸腾十年》，讲的是互联网发展史。作者提出了一个看待这段历史以及展望未来的理论：五新，新技术，新需求，新媒介，新供给，新XX（忘记了，好像是闭环）。受到的启发，要有发现需求的眼光，以及要靠自己的独立思辨能力来发现需求，在对新需求的预判上，大佬也会犯错。借着这个读书会，又种草了一本饮食方面的书：《盐糖脂》，讲述现代食品工业对人的利用，读着读着，我觉得食品工业像是一个大骗局，也原谅了自己有时对垃圾食品的暴饮暴食，因为这就是他们想要的哇！工业巨头做了大量实验，想让人们达到停不下来的效果，我会这么做是情有可原的。更警醒我，要尽可能远离这场骗局。我对食物的认识又进了一步。</p><p>工作上，临近年底，发现自己在做的产品，有了大的改动，和之前预定的方向不一样。第一下，我觉得自己的很多工作“白”做了，有点愤怒。再一想，我在这个过程中，对整体的框架更熟悉了，做的每一个改动都是新的体验，也达到了预想的效果，对工程的认识得到了强化。进一步，意识到了产品经理以及产品规划的重要性，自己也开始主动思考产品的走向，这一进步我很满意。最后，主动找到了对应的产品经理聊我的想法，这个聊天让我更理解了他们所做的改动，也对产品大的走向有了认知，最初的愤怒也化解了。产品之外，在架构上进行迁移的工作，也有些收获。一是对推荐系统中精排模型的流程更为熟悉，二是掌握了一定在迁移中进行debug的方法，如何打log，如何尽快定位到自己的bug，进度略慢于预期，要加油哇！</p><p>生活上，这周和小郭姐去复兴门吃了一家新加坡餐厅星怡会，意外地惊喜，很喜欢，价格也可以接受，还想再去。早上听德语也快养成习惯了，跟着录音读几遍，比一味地听，进步得更明显，哇咔咔，继续加油！</p><p>马上有新室友要来了，是个喜欢狗狗的小姐姐，希望豆包和她友好相处。本来以为周末还能去收养一只新狗狗，结果被鸽了。</p><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><p>工作技能</p><ul><li><input disabled="" type="checkbox"> 继续总结《秒懂设计模式》</li><li><input disabled="" type="checkbox"> 周二C++学习继续</li><li><input disabled="" type="checkbox"> 《黑客与画家》看完两章</li></ul><p>养生/健身：</p><ul><li><input disabled="" type="checkbox"> 控制住核桃的食用量哦，每天不超过6颗好吧</li><li><input disabled="" type="checkbox"> 周一：复习舞蹈</li><li><input disabled="" type="checkbox"> 周二：body combat</li><li><input disabled="" type="checkbox"> 周四：T25 gamma4</li><li><input disabled="" type="checkbox"> 周五：T25 gamma 5</li><li><input disabled="" type="checkbox"> 周日：House</li></ul><p>影视</p><ul><li><input disabled="" type="checkbox"> 《社交网络》</li></ul><p>写作：</p><ul><li><input disabled="" type="checkbox"> 在罗马的第一天</li></ul><p>德语：</p><ul><li><input disabled="" type="checkbox"> 第五篇</li><li><input disabled="" type="checkbox"> 第六篇</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计划回顾&quot;&gt;&lt;a href=&quot;#计划回顾&quot; class=&quot;headerlink&quot; title=&quot;计划回顾&quot;&gt;&lt;/a&gt;计划回顾&lt;/h1&gt;&lt;p&gt;工作技能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox</summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="Life" scheme="https://fuguigui.github.io/tags/Life/"/>
    
    <category term="Work" scheme="https://fuguigui.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Weekly summary</title>
    <link href="https://fuguigui.github.io/y2021wd4-summary/"/>
    <id>https://fuguigui.github.io/y2021wd4-summary/</id>
    <published>2021-12-12T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划回顾"><a href="#计划回顾" class="headerlink" title="计划回顾"></a>计划回顾</h1><ul><li><input checked="" disabled="" type="checkbox"> 博客更新技术贴：proto和thrift（正在整理中）</li><li><input disabled="" type="checkbox"> 德语三篇（66%）<ul><li><input checked="" disabled="" type="checkbox"> KlimaSchutz-Index</li><li><input checked="" disabled="" type="checkbox"> Sternsinger helfen Kinder in Not</li><li><input disabled="" type="checkbox"> Tief Ahmet und Hoch Bezena（没有完成）</li></ul></li><li><input checked="" disabled="" type="checkbox"> 写作：（100%）<ul><li><input checked="" disabled="" type="checkbox"> 意大利初印象</li></ul></li><li><input disabled="" type="checkbox"> 阅读总结：<ul><li><input disabled="" type="checkbox"> 《厨房里的哲学家》</li><li><input disabled="" type="checkbox"> 《远方的鼓声》</li></ul></li><li><input checked="" disabled="" type="checkbox"> 影视：<ul><li><input checked="" disabled="" type="checkbox"> 消失的爱人（看了薄暮之光和我是谁，没有绝对安全的系统）</li><li><input checked="" disabled="" type="checkbox"> 国王排名第八集</li></ul></li><li><input checked="" disabled="" type="checkbox"> 健身：（80%）<ul><li><input checked="" disabled="" type="checkbox"> T25 beta 4</li><li><input checked="" disabled="" type="checkbox"> T25 beta 3+7</li><li><input checked="" disabled="" type="checkbox"> T25 gamma 1（改为了urban）</li><li><input checked="" disabled="" type="checkbox"> T25 gamma 2（改为了locking）</li><li><input disabled="" type="checkbox"> T25 gamma 3（亲戚来了，暂停）</li></ul></li></ul><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>重新在生活里引入计划之后，心情舒畅了好多！那种无所事事的懒散驱散了，感觉每天又有很多收获呢。</p><p>因为整个人的积极性被带动了起来，在计划之外，又做了很多bonus的事。譬如周三早上花了30分钟跑了5公里多，利用中午的时间，把一本看了两个多月的书给看完了，对于工作的帮助很大。日常锻炼之外的街舞课也让人很愉悦。每天晚上遛豆包的时候，开始听《时间移民》，脑洞又丰富了一些。睡前读物变成了《品味四讲》，不得不说，这是本让人很安静享受的书。上Locking课的时候，收获了一个新的认知：Locking的pose一定要尽可能的停住，拉满节拍。Locking学了两个脚步和一个double的变换。老师教诲，街舞好多套路是single,single, double。昨天看了《我是谁：没有绝对安全的系统》，有被黑客吸引到。今天又在逛b站的时候，看了个《未来食物》，知道了有种叫做“分子料理”的很fancy的烹饪手法（其实，棉花糖就是一种啦），但是我大概率还是会喜欢原生态的食物。</p><p>豆包刚满六个月，就来姨妈了。虽然还是个小闹腾，但已经是大姑娘了，以后遛她的时候，还要开始提防小公狗们，哎呀呀，满满的老父亲心态。</p><p>这周在工作上，尝试了一个新的东西：从零调用别人的服务。目前还没有调通，对远程服务多了些认识，又能学到新东西了。今天突然想给自己的基金管理写一个爬虫，每天去爬数据，每周给我生成dashboard，帮我总结盈亏。因为现在的基金在多个平台上，管理起来比较麻烦。以后有空的时候拿出来做一做。</p><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><p>工作技能</p><ul><li><input disabled="" type="checkbox"> 总结《秒懂设计模式》这本书</li><li><input disabled="" type="checkbox"> 安排新一轮的阅读/学习计划：书单《程序员面试金典》，《程序员修炼之道：从 小工到专家》，《编程珠玑》，《C++语言的设计和演化》，《Vim实用技巧》、《黑客与画家》，《C++ Primer》</li></ul><p>养生/健身：</p><ul><li><input disabled="" type="checkbox"> 下一周都在10点半前睡觉叭</li><li><input disabled="" type="checkbox"> 不要暴饮暴食，要清淡饮食哦</li><li><input disabled="" type="checkbox"> 周三：T25 gamma1</li><li><input disabled="" type="checkbox"> 周五：T25 gamma2</li></ul><p>影视</p><ul><li><input disabled="" type="checkbox"> 消失的爱人</li></ul><p>写作：</p><ul><li><input disabled="" type="checkbox"> 继续在去罗马的路上，争取抵达罗马。</li></ul><p>德语：</p><ul><li><input disabled="" type="checkbox"> Tief Ahmet und Hoch Bezena（没有完成）</li><li><input disabled="" type="checkbox"> 第四篇哦</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计划回顾&quot;&gt;&lt;a href=&quot;#计划回顾&quot; class=&quot;headerlink&quot; title=&quot;计划回顾&quot;&gt;&lt;/a&gt;计划回顾&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 博客更新技术贴：p</summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="Life" scheme="https://fuguigui.github.io/tags/Life/"/>
    
    <category term="Work" scheme="https://fuguigui.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Weekly summary</title>
    <link href="https://fuguigui.github.io/y2021wd5-summary/"/>
    <id>https://fuguigui.github.io/y2021wd5-summary/</id>
    <published>2021-12-05T05:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>算下来，开始工作已经14周了，更新博客也停止14周了。按照学生时代的日历计算，14周相当于一个学期。这个学期初有很多的雄心壮志，一个学期过去也大多不了了之。我对自己许诺的工作阶段的生活状态，和当前自己真实的生活状态对比，还有相当大的差距。我为自己找的借口是“需要时间来适应”。这么长时间，也该适应够了。开始践行，就从更新博客开始吧。</p><p>那么，我对自己许诺的工作阶段的生活状态是什么呢？</p><p>理想目标上，是锻炼身体要坚持，专业学习不能停，生活内容要丰富，日常心态要平和。</p><p>空泛的目标落实到行动上应当是，</p><table><thead><tr><th>目标</th><th>行动</th></tr></thead><tbody><tr><td>锻炼</td><td>日常锻炼和兴趣爱好。工作日每天都要有半个小时+的锻炼时间，现在是T25进行中，要穿插安排瑜伽时间。兴趣爱好是街舞，每周至少三次街舞课。</td></tr><tr><td>专业学习</td><td>工作中遇到的新技能/新疑惑要及时解决。不能光工作而忘记了反思。</td></tr><tr><td>生活内容</td><td>剧本杀，影视剧，语言学习，阅读，狗子。</td></tr><tr><td>心态</td><td>周日属于自己的安静时刻。要自律。不急躁。</td></tr></tbody></table><p>然而，这14周，我并没有按照理想状态在行动。反思反思。</p><p>最容易破防的是自律，主要体现在饮食上。我常常会吃得很多。</p><p>为什么？资源过多。于我，过多的资源就是一种负担，心理上的负担，总是惦记着那些资源，觉得不用就是亏了。人啊，在资源有限时表现出的自制力，在资源无限时，容易崩溃。节制的敌人怕不是免费。公司的每天免费供应的零食和三餐，每天都在挑战我的自制力。每次发现好吃的，我身上总会经历这么一段对抗。自制力说，“别吃了，适可而止。再吃就是负担了。”贪婪的嘴巴说，“可是它好好吃啊。不吃就亏了。”亏了？亏着谁了？免费的东西总想多拿是不是？结局就是，要么吃得很多，累着了肠胃，撑到难受这种情况也发生过几次；要么把食物打包囤起来，坏掉了，进了垃圾桶。前者变成了自己身体上的负担，后者变成了垃圾桶的负担，浪费了粮食，又成了心理上的负担。且不论最后的负担，就这对抗本身，已经是挺费神的一件事了。</p><p>我必须学着为自己减负。</p><p>How?</p><p>或许我应该尝试把快乐的感觉，建立在享受适当分量的过程中，而不是霸占了额外分量的负担中。具体一点，拿吃饭来说，在吃每一口的时候，专注地去体会它给我带来的快乐，先把自己的快乐值充满。而非，分神去想，我要更多，更多，快乐值留着舍不得充，等着用额外的食物来充。这固然还是个理想状态。最硬的操作应该是，断掉无限资源的来源。我喜欢囤额外的零食是吧，那就扔掉桌子上存零食的袋子，让零食没有地方可以放。把家里囤的食物都清理掉，不要再拿不要再买。我不是一贯关心环保吗？多吃一份零食，它整个生产过程，包装袋，垃圾回收都额外给环境带来了多少负担哇？饿的时候吃些水果，最起码能节省些垃圾处理的环境负担。</p><p>下一个要反思的点是习惯养成。14周了，并没有养成多少很好的routine。大多时候想的是，“接下来我要怎样怎样”。“接下来”这个时刻似乎一直没等到，然而一回顾，发现已经过去14周了，吓一跳。所以，就从现在开始吧？没有养成良好的习惯，一个是因为计划没想清楚，二个是因为动力没充够。（也有我想做的事情太多的锅）现在就来针对这两方面解决解决。我想养成的习惯是什么？计划是什么？动力是什么？</p><ul><li><p>每天学习德语或者日语。</p><ul><li>德语的话，找到了dw的Top Thema系列，正好符合我这个阶段的水平（附一个19年的b站链接<a href="https://www.bilibili.com/video/BV1Ut411F7p1%EF%BC%89%E3%80%82%E6%AF%8F%E4%B8%80%E8%8A%82%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%89%E5%88%86%E9%92%9F%E5%B7%A6%E5%8F%B3%E7%9A%84%E9%9F%B3%E9%A2%91%EF%BC%8C%E9%85%8D%E5%A5%97%E7%BB%83%E4%B9%A0%E5%92%8Cscript%E3%80%82%E6%88%91%E7%9A%84%E8%AE%A1%E5%88%92%E6%98%AF%EF%BC%8C%E6%AF%8F%E5%91%A8%E8%BF%9B%E8%A1%8C%E4%B8%89%E8%8A%82%E3%80%82%E6%AF%8F%E4%B8%80%E8%8A%82%E7%9A%84%E9%9F%B3%E9%A2%91%EF%BC%8C%E5%9C%A8%E5%81%9A%E7%BB%83%E4%B9%A0%E6%97%B6%E5%BA%94%E8%AF%A5%E4%BC%9A%E5%90%AC%E5%88%B0%E4%B8%89%E9%81%8D%EF%BC%8C%E5%AF%B9%E7%9D%80script%E5%90%AC%E4%B8%80%E9%81%8D%E3%80%82%E8%84%B1%E7%A6%BBscript%E6%85%A2%E9%80%9F%E5%90%AC%E4%B8%80%E9%81%8D%EF%BC%8C%E8%B7%9F%E8%AF%BB2-3%E9%81%8D%EF%BC%8C%E8%80%97%E6%97%B6%E5%A4%A7%E6%A6%82%E5%9C%A8%E5%8D%8A%E5%B0%8F%E6%97%B6%E3%80%82%E8%BF%99%E8%8A%82%E7%9A%84%E5%8D%95%E8%AF%8D%E6%97%A9%E4%B8%8A%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%81%8D%EF%BC%8C%E4%B8%AD%E5%8D%88%E5%A4%8D%E4%B9%A0%E4%B8%80%E9%81%8D%EF%BC%8C%E6%99%9A%E4%B8%8A%E5%86%8D%E5%A4%8D%E4%B9%A0%E4%B8%80%E9%81%8D%E3%80%82%E5%8A%A8%E5%8A%9B%E6%98%AF%EF%BC%8C%E6%88%91%E6%97%A9%E6%99%9A%E6%98%AF%E8%A6%81%E5%8E%BB%E5%88%B0%E5%BE%B7%E8%AF%AD%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%94%9F%E6%B4%BB%E7%9A%84%E3%80%82">https://www.bilibili.com/video/BV1Ut411F7p1）。每一节是一个三分钟左右的音频，配套练习和script。我的计划是，每周进行三节。每一节的音频，在做练习时应该会听到三遍，对着script听一遍。脱离script慢速听一遍，跟读2-3遍，耗时大概在半小时。这节的单词早上学习一遍，中午复习一遍，晚上再复习一遍。动力是，我早晚是要去到德语环境中生活的。</a></li><li>日语的话，找到了b站的一个教学系列。可以每天早上遛狗的时候听听音频，周末集中学习1-2节b站上的课。动力是，看孤独的美食家。</li></ul></li><li><p>系统性地学习街舞。</p><ul><li>跟着老师练，是在周五晚上的urban，周六晚上的locking和周日晚上的House。自己练习的话，放在我早上健身之后，以及晚上有空的时间吧。周一早上用十几分钟的样子，复习学过的内容。周二早上，简单复习，学习一个简单的locking元素。周三早上，简单复习locking元素，周三晚上学习四个简单的house元素。周四早上，复习house元素，学习两个hiphop元素，晚上自学一段Hiphop律动。周五早上，集中复习。动力，这是我一生的爱好，跳舞是个又费脑子又锻炼身体的活，我喜欢，而且还有融合音乐的快乐。</li></ul></li><li><p>精进职业技能</p><ul><li>包括各种编程的技术和知识点。这一点，在每天的工作中会遇到一些general的，之前不太理解的知识，譬如rpc，proto，C++的进阶知识这种；还可以系统性地学习巩固知识点。对于每天遇到的，最好工作日晚上十点后，简短地对当天的难点进行一些回顾和记录。对于系统性地学习，工作日中午抽出一小点阅读时间，把想要学习的资料按顺序阅读，周末再集中整理笔记。目前的阅读list有：《秒懂设计模式》，《代码之外的功夫：程序员的精进之路》，《C++语言的设计和演化》。动力是，要靠这家伙吃饭，工程基础一定要打扎实了。</li></ul></li><li><p>阅读和写作计划</p><ul><li>这个放在周二晚上写作吧，其他晚上的时间可以看看书。动力，这也是我的爱好，特别是涉及创造，让人很有成就感。</li></ul></li><li><p>健康的饮食和运动习惯。</p><ul><li>饮食的话，我心里老是很别扭。吃的时候不敢吃，过分控制又导致饿的时候自制力崩溃，狂吃。结果还不如不控制的好。要详细列出一个饮食时间表和内容表，好好控制住自己，要可持续。运动习惯是迄今为止，我比较满意的，算是养成了的一个习惯，每天早上工作前会去做T25，提高一天的代谢水平。还希望能把瑜伽加入进来，我这四十岁的肩颈，需要好好治治。动力，可持续的健康习惯会让整个人的状态都不一样。</li></ul><p>这次反思得差不多了，从时间的角度总结一下：</p><p>工作日的早晨，先起来遛豆包，这个时间可以听听日语音频和德语新闻，半小时左右。遛完豆包回家学习一段德语音频，又是半小时左右。八点到十点是运动加早餐的时间。十二点后是午餐、午间阅读，背单词和午休的时间。大概五点钟要补充些水果或者蛋白质缓解饥饿。七点后是下班时间，晚饭加遛豆包，到家应该是八点半。进行写作or街舞学习or阅读or看剧。十点小总结下，休息。</p></li></ul><p>不错，计划贴起来，加油宝贝！每周要来博客更新哦～</p><h1 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h1><ul><li><input disabled="" type="checkbox"> 博客更新技术贴：proto和thrift</li><li><input disabled="" type="checkbox"> 德语三篇<ul><li><input disabled="" type="checkbox"> KlimaSchutz-Index</li><li><input disabled="" type="checkbox"> Sternsinger helfen Kinder in Not</li><li><input disabled="" type="checkbox"> Tief Ahmet und Hoch Bezena</li></ul></li><li><input disabled="" type="checkbox"> 写作：<ul><li><input disabled="" type="checkbox"> 意大利初印象</li></ul></li><li><input disabled="" type="checkbox"> 阅读总结：<ul><li><input disabled="" type="checkbox"> 《厨房里的哲学家》</li><li><input disabled="" type="checkbox"> 《远方的鼓声》</li></ul></li><li><input disabled="" type="checkbox"> 影视：<ul><li><input disabled="" type="checkbox"> 消失的爱人</li><li><input disabled="" type="checkbox"> 国王排名第八集</li></ul></li><li><input disabled="" type="checkbox"> 健身：<ul><li><input disabled="" type="checkbox"> T25 beta 4</li><li><input disabled="" type="checkbox"> T25 beta 3+7</li><li><input disabled="" type="checkbox"> T25 gamma 1</li><li><input disabled="" type="checkbox"> T25 gamma 2</li><li><input disabled="" type="checkbox"> T25 gamma 3</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算下来，开始工作已经14周了，更新博客也停止14周了。按照学生时代的日历计算，14周相当于一个学期。这个学期初有很多的雄心壮志，一个学期过去也大多不了了之。我对自己许诺的工作阶段的生活状态，和当前自己真实的生活状态对比，还有相当大的差距。我为自己找的借口是“需要时间来适应”</summary>
      
    
    
    
    <category term="Diary" scheme="https://fuguigui.github.io/categories/Diary/"/>
    
    
    <category term="Life" scheme="https://fuguigui.github.io/tags/Life/"/>
    
    <category term="Work" scheme="https://fuguigui.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Hexo进阶一：认识基本组件</title>
    <link href="https://fuguigui.github.io/hexo3/"/>
    <id>https://fuguigui.github.io/hexo3/</id>
    <published>2021-08-23T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是Hexo进阶内容的第一篇，主要介绍为了DIY Hexo主题风格，大概率会修改的组件/文件。将介绍以下内容：</p><ul><li>基本文件结构<ul><li>两个config的yaml文件</li><li>source文件夹</li><li>theme文件夹</li></ul></li><li>web前端“三剑客”：HTML+CSS+JavaScript及开发者工具</li></ul><p>本期视频很多内容参考<a href="https://www.youtube.com/watch?v=Jiwbmyc4nCA&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=6">YouTube Hexo系列视频</a>，强烈推荐该系列视频，每一集只有几分钟，讲得深入浅出，实用性很强。之后会出一篇介绍我对Matery主题的个性化配置和修改，还会出一篇介绍hexo使用的优质资源分享。</p><h1 id="基本文件结构"><a href="#基本文件结构" class="headerlink" title="基本文件结构"></a>基本文件结构</h1><p>当你第一次成功运行了一次hexo之后<code>hexo s</code>或者<code>hexo d</code>，在你的blog文件夹下，会看到以下的文件结构：</p><pre class=" language-bash"><code class="language-bash">- _config.yml- source/    <span class="token operator">|</span>--- _posts/    <span class="token operator">|</span>--- _data/    <span class="token operator">|</span>--- drafts/    <span class="token operator">|</span>--- about/    <span class="token operator">|</span>--- other folders- themes/    <span class="token operator">|</span>--- one or <span class="token function">more</span> theme folders, <span class="token keyword">in</span> each folder         <span class="token operator">|</span>--- _config.yml         <span class="token operator">|</span>--- languages/              <span class="token operator">|</span>--- yaml files         <span class="token operator">|</span>--- layout/              <span class="token operator">|</span>--- <span class="token punctuation">(</span>_partial/<span class="token punctuation">)</span>              <span class="token operator">|</span>--- <span class="token punctuation">(</span>_widget/<span class="token punctuation">)</span>              <span class="token operator">|</span>--- layout.ejs              <span class="token operator">|</span>--- index.ejs              <span class="token operator">|</span>--- post.ejs              <span class="token operator">|</span>--- other ejs files         <span class="token operator">|</span>--- source/              <span class="token operator">|</span>--- css/              <span class="token operator">|</span>--- js/              <span class="token operator">|</span>--- libs/              <span class="token operator">|</span>--- medias/         <span class="token operator">|</span>--- Others- package-lock.json- package.json- scaffolds/    <span class="token operator">|</span>--- several markdown files- public/- node_modules/- db.json</code></pre><p>作为一名前端小白，我第一次看到这些文件夹时，两眼一抹黑，根本不知道要改哪里。经过好长一段时间的摸索，逐渐搞清楚了。这里会按照重要性的顺序和使用的顺序来进行重点介绍。</p><p>首先的首先，我以为前端/hexo的重要三部分就是<strong>“内容+样式+功能”</strong>。一切的一切都是围绕这三项展开。</p><h2 id="两个config的yaml文件"><a href="#两个config的yaml文件" class="headerlink" title="两个config的yaml文件"></a>两个config的yaml文件</h2><p>通常，要DIY自己的网站的第一步就是修改<code>_config.yml</code>文件。注意：有两种<code>_config.yml</code>文件，</p><ul><li>第一种在最上层的文件夹里<code>***.github.io/_config.yml</code></li><li>第二种是在<code>themes/</code>文件夹下，和每个theme相匹配，例如<code>***.github.io/themes/matery/_config.yml</code></li></ul><p>为了便于区分，我将第一种称为大config，第二种称为小config。第一步修改的是大config。</p><p>大config涵盖了网站general的设置，比如网站的title，description，permalink等，详情参考<a href="https://hexo.io/zh-cn/docs/configuration.html">Hexo官方配置文档</a>。其中，选择使用哪个主题也在大config里设置。将<code>theme:</code>属性的值设置为<code>themes/</code>文件夹下你希望使用的主题的文件夹名字即可。</p><p>小config主要是针对特定的主题进行属性设置，不同主题的小config文件包含的属性也不一样。在接下来的一篇分享，我会针对<a href="https://github.com/blinkfox/hexo-theme-matery">Matery主题</a>详细介绍如何进行小config的修改。 </p><p>这两个文件对内容，样式，功能三个方面都有涉及。</p><h2 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h2><p>source文件夹是在主题配置完成后，主要进行文档写作，博客内容更新的地方。其中：</p><ul><li><code>_posts/</code>文件夹存放的是一般的blog markdown文件，会被最终展示到博客上，</li><li>而<code>drafts/</code>下面放的是草稿，这部分内容默认是不会被hexo渲染，也不会显示在网站上的。很方便地用于存储创作中的文章。</li><li><code>_data/</code>文件夹，如<a href="https://hexo.io/zh-cn/docs/data-files.html">官网介绍</a>，用于存放一些并不在文章内，且是需要重复使用的资料/数据。该文件夹下的文档的调用方式是：使用js/ejs，通过<code>site.data.filename</code>来调用。</li><li>其他诸如<code>categories/</code>，<code>tags/</code>，<code>404/</code>等文件夹，都是规定了相对应的分类页面，标签页面，404页面的内容。可匹配对应页面的在主题里的css, ejs文件做修改。之后也会分享到。</li></ul><h2 id="theme文件夹"><a href="#theme文件夹" class="headerlink" title="theme文件夹"></a>theme文件夹</h2><p>theme文件夹是前期对主题进行个性化设置时，主要修改的地方。一个theme主题的构成包括什么？老三样：<strong>“内容+样式+功能”</strong>。theme文件夹下的文件及文件们也对应着这三样。</p><ul><li>小config文件：是与当前主题相关的general的设置。比如：是否开启当前主题的某种功能。</li><li><code>languages/</code>： 存储属性与对应语言的翻译，用于更改网站的基础显示语言。</li><li><code>layout/</code>：一系列的<a href="https://ejs.bootcss.com/">ejs文件</a>：是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。可以理解为既包含了<strong>内容</strong>，又包含了<strong>功能</strong>，像是HTML和Java Script的综合体。其下的子文件夹无非是为了将同类的文件聚集到一起，增强结构的可读性。譬如：<code>layout/_partial/</code>里存放的是部分在不同页面共同使用的网页模块，页眉页脚等。</li><li><code>themes/.../source/</code>这个文件夹包含css的<strong>样式</strong>设置，网页展示使用的图片、logo等，额外安装的功能库等，如<a href="https://github.com/gitalk/gitalk/">gitalk</a>，<a href="https://echarts.apache.org/zh/index.html">echarts</a>。</li></ul><p>不同的主题下的文件结构可能略有差异，但构成内容大同小异。通常如果只是修改配色，就去到对应的<code>themes/.../source/css/...</code>去找到对应的部件/属性进行样式修改。如果要修改显示的内容，则需要到<code>themes/.../layout/</code>中找到对应的ejs文件进行修改。如果要修改/增删功能，也需要找到对应的ejs文件进行修改。</p><h2 id="其他的文件夹"><a href="#其他的文件夹" class="headerlink" title="其他的文件夹"></a>其他的文件夹</h2><p>其他的一级文件或者文件夹，很少会在个性化配置中进行更改，此处不赘述。如感兴趣<code>scaffolds/</code>文件夹，可以参考<a href="../hexo2/index.html#toc-heading-4">Hexo2: layout是什么</a>。<code>public/</code>文件夹请参考<a href="../hexo2/index.html#toc-heading-15">Hexo2：发布文章</a>中的<code>hexo clean</code>和<code>hexo generate</code>命令。</p><h1 id="Web前端“三剑客”"><a href="#Web前端“三剑客”" class="headerlink" title="Web前端“三剑客”"></a>Web前端“三剑客”</h1><p>这一部分，是我这个web前端小白入门前端的过程，希望能帮助到同样处境的人。当然前端的知识体系非常庞大，远不止我说的这三个，如果有进一步学习需求的小伙伴，推荐以下资源：</p><ul><li><a href="https://github.com/qianguyihao/Web">Github：前端入门到进阶图文教程</a></li><li><a href="https://www.youtube.com/watch?v=W6NZfCO5SIk">YouTube: JavaScript in 1 hour</a></li><li><a href="https://www.youtube.com/watch?v=qz0aGYrrlhU&amp;t=7s">YouTube: Learn HTML in 1 hour</a></li><li><a href="https://www.youtube.com/watch?v=TlB_eWDSMt4">YouTube: Node.js in 1 hour</a></li></ul><p>先来简要介绍一下“三剑客”都是谁，有什么作用，该如何使用。主要参考自<a href="https://github.com/qianguyihao/Web">Github：前端入门到进阶图文教程</a>。web前端“三剑客”包括：HTML，CSS和JS。</p><ul><li><strong>HTML</strong>：全称为 HyperText Markup Language，译为<strong>超文本标记语言</strong>。是用来组织网页的元素和<strong>内容</strong>的，也就是各个浏览器直接拿来显示给用户的文档。<ul><li>HyperText：超出了文本的限制，包括图片，音频，视频等</li><li>Markup：标记语言。会给元素做上标记，表明它是超链接啊，还是一级标题啊，还是图片啊，等等</li></ul></li><li><a href="https://www.runoob.com/css/css-intro.html"><strong>CSS</strong></a>：全称为<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets，译为<strong>层叠样式表</strong>。是定义如何显示HTML元素的，比如字体啊，颜色啊，大小啊，图片的长宽啊等等。负责老三样中的<strong>样式</strong>。</li><li>JS：全称为JavaScript，译为用Java写的脚本？是描述网页的<strong>行为功能</strong>（实现业务逻辑和页面控制）的，实现用户和网页的交互。而hexo里使用的ejs文档，又可译作embedded JavaScript，就是利用JavaScript生成HTML页面的。它和很多大家熟悉的编程语言Python，C/C++，Java等很像，有语法和对象。<ul><li>ECMAScript：JavaScript 的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</li><li>DOM：Document Object Model（文档对象模型），操作页面上的元素的API。比如让盒子移动、变色、改变大小、轮播图等等。</li><li>BOM：Browser Object Model（浏览器对象模型），操作浏览器部分功能的API。通过BOM可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</li></ul></li></ul><p>总结来说，就是HTML管内容，描述页面结构；CSS管样式，追求审美；JavaScript管功能，实现行为。当我们对这三方面有需求的时候，就去到各自的文件里进行修改即可。</p><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><p>最后介绍一个特别好用的工具：浏览器的开发者工具。</p><p>我所使用的浏览器FireFox和Google Chrome都具备这个功能。在FireFox/Google Chrom的“更多工具”中有个名为“Web开发者工具”的，Mac上对应的快捷键是<code>Option+Command+I</code>。一开始，我并不知道这个工具，修改主题时，那叫一个痛苦，后来得此利器，原地起飞。Web开发者工具不仅方便定位到代码位置，还可以直接调试css样式属性，即时查看效果，另外这些修改并不会动到原始的代码，极其方便进行大量尝试。</p><p>这个视频<a href="https://www.youtube.com/watch?v=qz0aGYrrlhU&amp;t=7s">YouTube: Learn HTML in 1 hour</a>从14:30秒起简要介绍了web开发者工具，无法科学上网的小伙伴也可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Tools">FireFox Tools</a>。</p><p>总结，本篇主要介绍了理论内容，尽可能地为进行主题个性化配置打下理论基础，免得到时候两眼一抹黑，胡同里乱钻。另外，强烈推荐使用<strong>Web开发者工具</strong>，此乃神器！</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://www.youtube.com/watch?v=Jiwbmyc4nCA&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=6">YouTube Hexo系列视频</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">Hexo Matery主题</a></li><li><a href="https://hexo.io/zh-cn/docs/data-files.html">Hexo data文件夹</a></li><li><a href="https://github.com/gitalk/gitalk/">gitalk</a></li><li><a href="https://echarts.apache.org/zh/index.html">echarts</a></li><li><a href="https://github.com/qianguyihao/Web">Github：前端入门到进阶图文教程</a></li><li><a href="https://www.youtube.com/watch?v=W6NZfCO5SIk">YouTube: JavaScript in 1 hour</a></li><li><a href="https://www.youtube.com/watch?v=qz0aGYrrlhU&amp;t=7s">YouTube: Learn HTML in 1 hour</a></li><li><a href="https://www.youtube.com/watch?v=TlB_eWDSMt4">YouTube: Node.js in 1 hour</a></li><li><a href="https://www.runoob.com/css/css-intro.html">CSS</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Tools">FireFox Tools</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇是Hexo进阶内容的第一篇，主要介绍为了DIY Hexo主题风格，大概率会修改的组件/文件。将介绍以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本文件结构&lt;ul&gt;
&lt;li&gt;两个config的yaml文件&lt;/li&gt;
&lt;li&gt;source文件夹&lt;/li&gt;
&lt;li&gt;theme文件夹</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Hexo" scheme="https://fuguigui.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>一次完整的Hexo写作流程</title>
    <link href="https://fuguigui.github.io/hexo2/"/>
    <id>https://fuguigui.github.io/hexo2/</id>
    <published>2021-08-17T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.678Z</updated>
    
    <content type="html"><![CDATA[<p>推荐有任何疑问点的时候，先去查阅<a href="https://hexo.io/zh-cn/docs/writing.html">hexo官方文档</a>。但是官方文档，有着工具书共同的弊端：缺乏对日常操作的指导性，难以分清阅读顺序，难以区分各个内容的重要程度和优先级。</p><p>我将根据一次hexo更新博客的完整流程，重新整理总结需要的命令操作。</p><p>网上也有很多博文进行此方面操作，可参考<a href="https://zhuanlan.zhihu.com/p/156915260">知乎Hexo博客写文章及基本操作</a>。不同于这些博文，我会额外介绍操作背后的原理。</p><p>一次使用hexo更新博客的基础操作流程为：</p><ol><li>新建一个文章</li><li>文章写作</li><li>本地预览更新后的博客</li><li>远程部署更新博客</li></ol><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><p>实际上，hexo渲染一篇post的工作流程是：</p><ol><li><p>拿到一个markdown文件，</p></li><li><p>根据这个文件的layout类型，</p></li><li><p>进行样式排版，生成html文件，</p></li><li><p>最终展示到网页端。</p></li></ol><p>因此，一个<code>_posts/</code>文件夹下的markdown文件就会对应到一篇post。所以，第一步是创建一个markdown文件。有两种方法：</p><ul><li>使用hexo的命令</li><li>按常规的操作，新建一个markdown文件，并保存到<code>_posts/</code>文件夹下即可。</li></ul><h2 id="使用hexo的命令"><a href="#使用hexo的命令" class="headerlink" title="使用hexo的命令"></a>使用hexo的命令</h2><p>官方文档是这么说的：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>实际上，常用的操作是：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"我的第一篇文章"</span></code></pre><p>输入这行命令背后的操作是：默认生成一个<strong>layout</strong>为post类型的markdown文件，该文件存储为<code>***.github.io/source/_posts/我的第一篇文章.md</code>。</p><h2 id="常规的操作"><a href="#常规的操作" class="headerlink" title="常规的操作"></a>常规的操作</h2><p>也可以不使用命令行进行生成，我更习惯于直接在Typora中新建文件，并保存到<code>***.github.io/source/_posts/</code>这个位置。</p><p>我觉得这样的操作更便捷，因为我常常是打开Typora之后，有多个文档要写，直接<code>Ctrl + N</code>新建一个文档，会快很多。当然这种操作也有弊端：</p><ul><li><p>需要手动添加文章头部信息Front Matter。添加头部信息Front Matter的操作是：</p><ul><li>先输入三个短横线-，<code>---</code>，然后回车。</li><li>在出现的阴影框里，输入希望添加的属性值，<ul><li>常用的有<code>title, date, author</code></li><li>次常用的有<code>categories, tags</code></li><li><a href="https://hexo.io/zh-cn/docs/front-matter">Front-Matter official manual</a></li><li>其他的还有比如：<code>mathjax</code>, <code>top</code>等是hexo的一些插件需要使用的参数。</li></ul></li></ul><p>Front Matter其实就是预先告诉hexo该博文的一些基本属性。可以用文件类比，理解为文件的类型信息，创建日期信息，用什么方式打开，而不涉及具体的文件内容。</p></li><li><p>如果该文章需要展示图片，pdf等其他文件时，需要自行创建一个<strong>同名文件夹</strong>。示例，如果你的markdown文件叫做<code>_posts/markdown-demo.md</code>的话，同名文件夹就是<code>_posts/markdown-demo/</code>。</p><p>如果你将<code>***.github.io/_config.yml</code>中的<code>post_asset_folder</code>设置为<code>true</code>，那么使用hexo命令，则会自行创建这个同名文件夹。</p></li><li><p>不适用于自定义layout以减少重复工作量的情形。（详细参考下面的layout是什么）</p></li></ul><p>使用hexo命令方式创建文档，会自动生成<code>title, date</code>信息。</p><h2 id="layout是什么（进阶内容，可跳过）"><a href="#layout是什么（进阶内容，可跳过）" class="headerlink" title="layout是什么（进阶内容，可跳过）"></a>layout是什么（进阶内容，可跳过）</h2><p>感兴趣且可以科学上网的同学，强烈推荐一个<a href="https://www.youtube.com/watch?v=Jiwbmyc4nCA&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=6">YouTube Hexo系列视频</a>。第六集scaffolds和第十二集layout基本就对应本小节内容。</p><p>回到官方文档，会看到<code>hexo new</code>命令有个可选参数叫做<code>[layout]</code>。在文档的下一句说到</p><blockquote><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p></blockquote><p>有的博主会介绍说，布局有三种：<code>post</code>（文章）、<code>draft</code>（草稿）、<code>page</code>（页面）。其实不够准确。如果你愿意，你可以有n多种布局。只不过这三种是hexo以及大多数主题theme已经默认帮你写好的。</p><p><em>那么什么是layout呢？</em></p><p>layout：英文直译是版面设计。也就是说这个命令告诉hexo，该如何排版。不同的排版使用不同的html网页布局，css样式，展示不同的属性。</p><p><em>hexo是如何根据这个layout参数值进行后续操作的呢？</em></p><ul><li><p>首先，每一个markdown文件都有自己的layout。对于没有显示在Front Matter写明layout种类的文件，hexo会自动根据<code>***.github.io/_config.yml</code>中的<code>default_layout:</code>属性值来决定是什么layout，这个值默认为<code>post</code>。也就是说hexo会默认根据post的内容及格式规定对markdown文章进行渲染。</p></li><li><p>一个layout有两个位置的定义来共同决定。</p><ul><li>在<code>***.github.io/scaffolds/</code>文件夹下，和</li></ul></li><li><p>在<code>***.github.io/themes/theme-name/layout/</code>文件夹下。</p></li></ul><h3 id="scaffolds文件夹"><a href="#scaffolds文件夹" class="headerlink" title="scaffolds文件夹"></a>scaffolds文件夹</h3><p>第一个部分<code>scaffolds/</code>文件夹下，主要规定新建markdown文件的内容：Front Matter和正文。</p><p>举例：可以在该文件夹下，创建一个新的md文件，假设叫做<code>selflayout.md</code>，在里面输入</p><pre><code>---title: {{title}}date: {{date}}author: hahahalayout: {{layout}}---Demo: self-defined post content</code></pre><p>  这之后，就可以直接使用hexo命令行操作</p><pre class=" language-bash"><code class="language-bash">hexo new selflayout <span class="token string">"demo"</span></code></pre><p>  在<code>_posts/</code>文件夹下，生成一个名为<code>demo.md</code>layout为selflayout的文件啦。</p><p>  更改<code>scaffolds/</code>下的对应markdown文件，可以大大减少很多重复工作。</p><ul><li>比如你想要创建一个系列博客，共享一些<code>categories, author</code>，你就可以新建一个layout，在Front Matter中添加<code>categories, author</code>的属性值。</li><li>再比如所有的post的作者都是同一个人，叫aa，而你不想在每一篇post的Front Matter中都手动添加<code>author: aa</code>。就可以选择在<code>scaffolds/post.md</code>的Front Matter中添加<code>author: aa</code>。这样，每次使用<code>hexo new file-name</code>都会自动实现这个功能啦。</li></ul><h3 id="theme的layout文件夹"><a href="#theme的layout文件夹" class="headerlink" title="theme的layout文件夹"></a>theme的layout文件夹</h3><p>一个layout的第二部分定义在<code>themes/theme-name/layout/</code>文件夹下。这部分主要规定ejs, css等具体的排版样式。hexo渲染一个页面的先后顺序是，所有的页面都建立在<code>layout.ejs</code>的基础上，然后根据各自的版面进行渲染，</p><ul><li>比如index.html的页面是这么生成的，最外层是<code>layout.ejs</code>，然后将<code>layout.ejs</code>内部的<code>&lt;%- body %&gt;</code>替换为<code>index.ejs</code>的渲染效果。</li><li>再比如一篇博客的html页面是这么生成的，最外层是<code>layout.ejs</code>，然后将<code>layout.ejs</code>内部的<code>&lt;%- body %&gt;</code>替换为<code>post.ejs</code>的渲染效果。</li></ul><p>对应于<code>_posts/</code>文件下的每一个markdown文件，如果Front Matter里</p><ul><li><p>没有指明layout是什么，会默认根据<code>_config.yml</code>里的<code>default_layout: post</code>使用<code>layout.ejs</code> + <code>post.ejs</code>方式进行渲染</p></li><li><p>如果指明了layout是什么（比如我们上面新建了一个叫做<code>selflayout</code>的layout），</p><ul><li>在<code>themes/theme-name/layout/</code>下也存在<code>selflayout.ejs</code>文件，就会使用<code>layout.ejs</code> + <code>selflayout.ejs</code>方式进行渲染</li><li>如果在<code>themes/theme-name/layout/</code>不存在对应的ejs文件，仍会默认使用<code>layout.ejs</code> + <code>post.ejs</code>方式进行渲染。</li></ul></li></ul><p>总结来说，<strong>scaffolds文件夹下，会对内容进行默认设置，而theme的layout文件夹下的ejs文件，则会对排版进行设置。</strong></p><h1 id="文章写作"><a href="#文章写作" class="headerlink" title="文章写作"></a>文章写作</h1><p>对于一般的文字内容排版，只需要按照markdown的写作格式进行写作即可。例如：一级标题，二级标题，emoji输入，加粗斜体等。</p><p>我这里添加几个我常用到的额外的功能：插入本地图片，展示本地pdf，展示数学公式，链接到本站其他blog</p><h2 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h2><p>这里主要参考这篇文章<a href="https://fuhailin.github.io/Hexo-images/">赵大宝hexo-images</a>，介绍的很详细，我在此基础上稍作补充。在此说明这篇文章里的前四个方法：</p><ul><li><p>绝对路径本地引用，方法：</p><ul><li>将图片存储于<code>source/images</code>文件夹中</li><li>在markdown文件中写<code>![picture description](images/picname.picformat)</code></li></ul></li><li><p>相对路径本地引用，方法：</p><ul><li>将图片存储于<code>_posts/</code>同名文件夹下</li><li>同绝对路径引用，在markdown文件中写<code>![picture description](images/picname.picformat)</code></li></ul></li><li><p>标签插件语法引用，方法：</p><ul><li><p>将图片存储于<code>_posts/</code>同名文件夹下</p></li><li><p>在markdown文件中写<code>{% asset_img image.jpg This is an image %}</code></p></li></ul></li><li><p>HTML语法引用</p><ul><li>将图片存储于<code>_posts/</code>同名文件夹下</li><li>在markdown文件中写<code>&lt;img src="picname.picformat" weight="50%" height="100%" title="picture description" alt="picture alternative description"/&gt;</code></li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例以及优劣势比较。以下是我使用这四种方法展示本地图片的效果：</p><ul><li>绝对路径</li></ul><p><img src="/images/BD1.png" alt="绝对路径"></p><ul><li>相对路径</li></ul><p><img src="BD1.png" alt="相对路径"></p><p><img src="BD1_mini.png" alt="相对路径小图"></p><ul><li>标签插件语法引用</li></ul><ul><li>html引用</li></ul><img src="BD1.png" weight="50%" height="50%" title="html引用小图" alt="html引用小图"><img src="BD1.png" height="100%" title="html引用原图" alt="html引用原图"><h3 id="优劣势比较"><a href="#优劣势比较" class="headerlink" title="优劣势比较"></a>优劣势比较</h3><p>根据我的测试结果：</p><ul><li>标签插件语法引用失效。没闹明白为什么。如果有知道的同学，我真诚求教。</li><li>html引用小图失效。我的设置是<code>weight="50%" height="50%"</code>。依旧没弄明白为什么，求教中。</li><li>绝对路径和相对路径在引用效果上没有区别。唯一的区别是文件存储位置，是喜欢图片集中存放，还是每个post建一个文件夹存放，因人而异。</li><li>使用markdown本身的路径引用方式的话，无法在引用时调整图片大小。网页端最终显示的图片大小是图片原本的大小（如果屏幕放得下的话）。想要调整显示页面的图片大小，必须<strong>手动更改图片原本的大小</strong>。比如，我这里相对路径引用的原图和小图，其实对应着两个png文件，一个为原始图片大小为宽1097高537，一个我手动更改为小图，其尺寸为宽500高245。</li><li>使用html引用方式的优势在于，可以在引用时更改大小（？？？原理上是这样，但是我没有成功？？？）；还可以设置图片的替代描述文字（当图片无法正常显示的时候，用以替代图片的文字显示）。</li><li><strong>总体来说：我推荐绝对/相对路径引用方式</strong></li></ul><h2 id="展示本地pdf"><a href="#展示本地pdf" class="headerlink" title="展示本地pdf"></a>展示本地pdf</h2><p>对此网上也有诸多教程，在此参考一篇<a href="https://blog.csdn.net/u010820857/article/details/82356974">csdn博客hexo添加pdf插件</a>，并另外补充一种markdown的文件引用方式。</p><ul><li><p>使用npm插件方式：</p><ul><li><p>安装插件：<code>npm install --save hexo-pdf</code></p></li><li><p>将pdf文件存储于<code>_posts/</code>的同名文件夹下。</p></li><li><p>在markdown文本里输入：</p><pre><code>{% pdf file-name.pdf %} </code></pre></li><li><p>（如果需要引用网上pdf资源，可以直接使用<code>{% pdf http://url-to-pdf/file-name.pdf %} </code>）</p></li></ul></li><li><p>markdown自带的文件引用方式：</p><ul><li><p>将pdf文件存储于<code>_posts/</code>的同名文件夹下。</p></li><li><p>在markdown文本里输入：</p><pre><code>[pdf file description](file-name.pdf)</code></pre></li></ul></li></ul><p>这两种方法都可以使别人获取你的pdf文件，区别在于：</p><ul><li>npm插件方式：会生成内置pdf的小窗口，<strong>读者可以直接阅读到pdf文件内容</strong>。</li><li>markdown自带的方式：会生成一行带有超链接的文字，点击文字，则直接提示下载该文件。这行文字就是种括号里你输入的描述性文字。</li></ul><p>我一般希望别人直接阅读到我的pdf内容，所以推荐npm的插件方式。</p><h2 id="展示数学公式"><a href="#展示数学公式" class="headerlink" title="展示数学公式"></a>展示数学公式</h2><p>参考<a href="https://blog.csdn.net/qq_38496329/article/details/104065659">csdn:hexo博客支持数学公式</a>。</p><ul><li><p>安装npm渲染器：<code>npm install hexo-renderer-kramed --save</code></p></li><li><p>修改<code>***.github.io/_configs.yml</code>配置文件中</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>在markdown文件的Front Matter加入<code>mathjax: true</code></p></li><li><p>按照markdown语法，在需要添加数学公式的地方，直接按照markdown语法使用<code>$ formula $</code>添加行内公式或者<code>$$ formula $$</code>添加整行公式。</p></li></ul><h2 id="链接到本站其他blog"><a href="#链接到本站其他blog" class="headerlink" title="链接到本站其他blog"></a>链接到本站其他blog</h2><p>如何在当前的blog里引用本站其他的blog呢？</p><p>本质上就是直接使用markdown的文件链接方式：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>file description<span class="token punctuation">]</span><span class="token punctuation">(</span>file path<span class="token punctuation">)</span></code></pre><p>唯一不同的就是这里的file path，不是指要被引用的markdown文件在<code>_posts</code>文件夹的位置，而是<strong>经hexo渲染后生成的html文件的位置</strong>。</p><p>举例来说，我这里想引用另一篇介绍hexo的blog，它的原始文件叫做<code>source/_posts/Hexo1.md</code>，经hexo渲染后的文件存储为<code>public/hexo1/index.html</code>。</p><p>而我当前的文件叫做<code>source/_posts/Hexo2.md</code>，经hexo渲染后的文件存储为<code>public/hexo2/index.html</code>。</p><p>如果习惯于markdown文件的书写，可能会直接在本文件里写</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Hexo1<span class="token punctuation">]</span><span class="token punctuation">(</span>Hexo1.md<span class="token punctuation">)</span></code></pre><p>正确的写法应该是，</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Hexo1<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">..</span>/hexo1/index.html<span class="token punctuation">)</span></code></pre><p>这是因为hexo在渲染的时候，并不会更改<code>()</code>中的内容。如果按照第一种写法，实际上会在<code>public/hexo2/</code>文件夹下寻找名为<code>Hexo1.md</code>的文件，并不存在。按照第二种写法，则是先去到父目录<code>public/</code>然后找到<code>hexo1/index.html</code>。</p><p><a href="../hexo1/index.html">Hexo1</a></p><p>当然，有的小伙伴的blog是用时间来生成路径的，比如<code>public/2019/07/02/hexo2/index.html</code>，同理寻找到正确的路径即可。至于如何控制hexo使用时间还是文章标题来命名，在<code>_config.yml</code>文件里有一个属性叫做<code>permalink: </code>，我这里设置为<code>:title/</code>，即按照blog标题生成链接路径。</p><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>此外，可以在<code>source/drafts/</code>文件夹下，创建markdown文件，写草稿。在这些文档里，正常写作即可，但它们不会被渲染，也就不会显示在最终的博客页面里。</p><h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>先列举一些常用的命令</p><ul><li><p>Clean: <code>hexo clean</code>。该命令会删除整个<code>***.github.io/public/</code>文件夹</p></li><li><p>Generate: <code>hexo generate</code>或者简写为<code>hexo g</code>。该命令会生成静态文件夹<code>public/</code>，也就是从markdown到网页文件html等的转换操作</p></li><li><p>Server: 启动服务器常用的是<code>hexo server</code>或者简写为<code>hexo s</code>。</p><ul><li>若需指定端口号则为<code>hexo server -p 5000</code>5000可以更改为其他端口号。</li></ul><p>该命令会把生成好的静态文件部署到本地的指定端口，之后即可在本地浏览器输入<code>localhost:4000</code>即可预览。若指定了端口号，则把4000改为你指定的端口，如上个示例中的<code>localhost:5000</code></p></li><li><p>deploy：<code>hexo deploy</code>或者简写为<code>hexo d</code>。该命令将网站部署到服务器上。实际操作是：更新你在github上的仓库<code>***.github.io</code>的指定分支（如果你采用Hexo系列第一节说到的两分支方式的话）。这是你最终发表的博客页面，你可以在浏览器上访问<code>https://***.github.io</code>来查看更新后的博客啦。</p></li></ul><p>接着，给出一些命令使用的常见套路</p><ul><li><code>hexo clean</code>这个命令其实很少用。使用情况常见于：更新了<code>_config.yml</code>文件夹，删除了一些已有博文等。原因就是速度慢，耗费不必要的时间。毕竟它会将整个<code>public/</code>文件夹删除，再重新生成。推荐偶尔清理使用即可。</li><li>通常更新一次博客的套路是先本地预览，再远程部署。即先执行<ul><li><code>hexo g; hexo s</code>，再执行</li><li><code>hexo d</code>或者<code>hexo g; hexo d</code></li></ul></li><li>hexo有个特别便利的地方！<ul><li><p>在本地预览时，你仍可以更改markdown文件中一般的文字内容，然后直接在浏览器端刷新页面，就能看到实时更改的效果，而不需要再执行一次<code>hexo g;hexo s</code>，节省很多时间。常用于预览过程中进行微调操作。我的测试表明，此时更改文章的<code>categories, tags</code>等Front-Matter的属性的话，也可以动态刷新，很神奇。</p></li><li><p>但是，有些涉及到更深层次的操作，比如利用到themes文件里的js函数，css样式，文件链接等，可能无法实时更新。此时仍需要重新generate才可以预览最新效果。同理，如果你更改了themes文件夹下面的css文件, ejs文件, yml文件等，通常也需要重新渲染。</p></li><li><p>注意：在执行<code>hexo s</code>之后，想要中断操作，使用的是<code>control + C</code>快捷键。我老会习惯性地使用<code>con trol + Z</code>的快捷键。此时，可能出现端口被占用的错误。解决办法是：1. 找到被占用端口4000的进程号pid，2. kill掉这个进程。</p><pre><code>lsof -i:4000kill -9 pid</code></pre></li></ul></li><li>如果你采用两个分支的git部署方式。使用<code>hexo d</code>只是更新了其中的一个分支，此时仍需要进行常规的git仓库更新操作<code>git add ... git commit ... git push</code>这一系列来更新另一分支。</li></ul><p>总结来说，最常用的套路就是</p><ol><li><code>hexo g; hexo s</code>本地预览，再更改，直到满意为止</li><li><code>hexo d</code>或者<code>hexo g; hexo d</code>远程部署。</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://hexo.io/zh-cn/docs/writing.html">hexo官方文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/156915260">知乎Hexo博客写文章及基本操作</a></li><li><a href="https://hexo.io/zh-cn/docs/front-matter">Front-Matter official manual</a></li><li><a href="https://www.youtube.com/watch?v=Jiwbmyc4nCA&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=6">YouTube Hexo系列视频</a></li><li><a href="https://fuhailin.github.io/Hexo-images/">赵大宝hexo-images</a></li><li><a href="https://blog.csdn.net/u010820857/article/details/82356974">csdn博客hexo添加pdf插件</a></li><li><a href="https://blog.csdn.net/qq_38496329/article/details/104065659">csdn:hexo博客支持数学公式</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐有任何疑问点的时候，先去查阅&lt;a href=&quot;https://hexo.io/zh-cn/docs/writing.html&quot;&gt;hexo官方文档&lt;/a&gt;。但是官方文档，有着工具书共同的弊端：缺乏对日常操作的指导性，难以分清阅读顺序，难以区分各个内容的重要程度和优先级。&lt;</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Hexo" scheme="https://fuguigui.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Simplicial neural network思路梳理</title>
    <link href="https://fuguigui.github.io/simplicial-neural-network-si-lu-shu-li/"/>
    <id>https://fuguigui.github.io/simplicial-neural-network-si-lu-shu-li/</id>
    <published>2021-08-16T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.680Z</updated>
    
    <content type="html"><![CDATA[<p>我在准备master thesis的时候，第一个选题是希望利用simplicial complex结合GNN在hypergraph领域做些理论突破。现回顾梳理在GNN中使用simplicial相关理论的研究思路和代表性工作。</p><p>本文按照“明确问题——理论方案——实践”结构展开：</p><ul><li>明确问题：传统的图结构有什么不足，什么是高阶图？</li><li>理论方案：<ul><li>在高阶图上的解决思路有哪些？</li><li>用通俗的语言介绍simplicial complex理论</li><li>其他可能的方案：subgraph</li></ul></li><li>实践：简要介绍simplicial complex与neural network结合的代表性研究者/工作</li></ul><h1 id="问题：高阶图"><a href="#问题：高阶图" class="headerlink" title="问题：高阶图"></a>问题：高阶图</h1><p>GNN是当红的在图结构上进行深度学习的工具，而simplicial complex的引用主要是为了解决<strong>高阶图</strong>上的深度学习问题。</p><p>传统的Graph（图）是由点和边组成的结构。“一条边连接两个端点”，这就局限了传统的图只能直接捕捉<strong>pairwise relationship</strong>（成对的关系）。举例来说，假设A，B，C是一个学校社交图中的三名学生（看成该图中的三个点），我们把边定义为“好朋友”关系。</p><ul><li><p>我们可以很容易地刻画A和B是好朋友，在A点和B点间连一条边即可，这就是pairwise relationship，涉及两个人。</p></li><li><p>但是如果我们想描述A，B和C是一个好朋友团体，他们仨总是玩在一起，那该怎么表示？此时的关系涉及三个人，超过了pairwise，有的文章里将其称之为<strong>higher-order relationship（高阶的关系）</strong>。</p><p>利用传统的点-边图结构，会有这么种表示方法，一共连三条边，A和B之间一条，B和C之间一条，A和C之间一条。但其实，这种方法并不能很准确地表示“他们仨这个小团体”，也可以被诠释为，A和B，B和C，A和C互为好朋友，然而A和B在上午玩在一起，B和C在下午玩在一起，A和C却在晚上玩在一起。当然，在这种传统图结构上，人们也想出各种其他的方法来描述这种higher-order relationship，比如引入不同类型的点，引入“好朋友”类型的点，A，B和C三个“人”类型的点（可以用圆形点表示），都和一个“好朋友”类型的点（可以用正方形的点表示）相连，就能表示三个人的团体关系了。（例子可以类比于图1中的A图）这里不过多赘述。</p></li></ul><p>这里我们清楚了了要解决的问题：<em>是希望在包含<strong>higher-order  relationship高阶图（又叫hypergraph）</strong>上搭建神经网络模型</em>。超越成对关系的高阶图其实相当普遍，比如社交网络中的‘群组“概念，生态系统中物种之间的互动关系，化学反应中的多种物质共同作用等。对高阶图感兴趣的读者可以参考一篇综述<a href="https://arxiv.org/abs/2006.01764">1. Networks beyond pairwise interactions: structure and dynamics</a>。</p><p><img src="affiliations.png" alt="图1：Pairwise representation VS Hyperedge representation。图片来自于Networks beyond pairwise interactions: structure and dynamics"></p><h1 id="理论方案"><a href="#理论方案" class="headerlink" title="理论方案"></a>理论方案</h1><p>那么要如何解决这个问题呢？既然问题的根源出在“点-边”这种传统的图结构上，就必须寻求一种新的结构来刻画高阶关系。这里介绍两种具有代表性的新结构：1. hyperedge和2. simplicial complex。也有学者从subgraph的角度切入做研究，我表示好奇，还在观察中。</p><h2 id="Hyperedge（超边）"><a href="#Hyperedge（超边）" class="headerlink" title="Hyperedge（超边）"></a>Hyperedge（超边）</h2><p><strong>Hyperedge（超边）</strong>这种想法非常直观。传统图的限制在哪儿，在边，因为一条边只能有两个端点。Ok，那就打破这种限制，让一条边可以有三个甚至更多的端点，问题不就解决了吗？这样的边就叫做<strong>hyperedge（超边）</strong>。比如我们想表示Sarah, Ross, Allison都去了Party1这件事，我们就构造一条超边叫做Party1，它包含了三个点Sarah, Ross, Allison。形象的表示出来例如图1中的B，其中黄色的圈就是Party1这条超边，它圈住了三个点sarah, Ross和Allison。</p><p>还可以从集合论的角度来理解超边。在传统的无向图定义中，将一条边规定为包含两个点的集合，那么超边就可以定义为不限数量的点的集合。</p><p>已有一批学者尝试将超边的概念和GNN结合起来，代表工作有：</p><p><a href="https://arxiv.org/abs/1809.09401">2. HGNN: Hypergraph neural networks</a></p><p><a href="https://papers.nips.cc/paper/2019/hash/1efa39bcaec6f3900149160693694536-Abstract.html">3. HyperGCN</a></p><p><a href="https://dl.acm.org/doi/10.1145/3340531.3411870">4. NHP</a></p><p><a href="https://www.sciencedirect.com/science/article/abs/pii/S0031320320304404?via=ihub">5. Hypergraph Convolution and Hypergraph Attention</a></p><p>这些工作的思路主要是沿着图神经网络里的<strong>基于谱方法的图卷积</strong>（网上很多资源介绍，可参考<a href="https://zhuanlan.zhihu.com/p/78466344">知乎：从源头探讨GCN的行文思路</a>）分支走，尝试定义Hypergraph上的Laplacian矩阵，进而定义图卷积。</p><h2 id="Simplicial-complex"><a href="#Simplicial-complex" class="headerlink" title="Simplicial complex"></a>Simplicial complex</h2><p>另一种理论解决方案呢，则是寻求在数学上已经进行相当长时间的研究，且和我们的问题非常契合的理论工具：<a href="https://encyclopediaofmath.org/index.php?title=Simplicial_complex">simplicial complex</a>。</p><p>什么是simplicial complex？</p><p>一句话从集合的角度来描述simplicial complex，就是，首先有一个集合，集合里的每个元素叫做vertices（点），这个集合中<em>满足一定性质的</em>子集就叫做simplex。这里一定的性质，是子集封闭，也就是一个simplex的任何一个子集都得是一个simplex，最基本的，一个点是一个simplex。如果你把边看做是包含两个点的子集，那么边就是一种simplex。接着便很容易拓展到包含更多元素的simplex。图2的第一行就展示了什么是simplex，</p><ul><li>左上角的是边，也就是包含两个点的1-simplex。每一个点都是一个0-simplex</li><li>中间是包含三个点的2-simplex，其中每一条边都是一个1-simplex。</li><li>右边是包含四个点的3-simplex，<ul><li>它有四个包含3个点的子集，每一个子集都是一个2-simplex。</li><li>有6个包含2个点的子集（边），每一个子集都是一个1-simplex</li><li>有4个包含1个点的子集（也就是一个点），每一个子集都是一个0-simplex</li></ul></li></ul><p>第二行是hyperedge与simplex表示的对比。</p><p><img src="simplex.png" alt="图2:What is simplex?图片来自于Networks beyond pairwise interactions: structure and dynamics"></p><p>这个理论工具乍看很复杂，为什么要使用它呢？</p><p>我的理解是，一是hodge laplacian不局限于信号在点与点之间的传播，可以拓展到边与边之间，三角形与三角形之间等等，二是simplicial complex的理论研究成果丰富，应用起来有理论上的保障，能进行有良好定义的数学运算，其中的<strong>Hodge Laplacian</strong>是graph Laplacian的高阶拓展，而这也正是我们需要的。simplicial complex及hodge laplacian的理论涉及到很多数学知识，可能比较劝退。这里贴出两个偏科普类型的资源，较浅显易懂，感兴趣的小伙伴可以看看。</p><ul><li><p><a href="https://www.youtube.com/watch?v=rlI1KOo1gp4">YouTube: Simplicial Complexes</a></p></li><li><p>:+1: <a href="https://www.stat.uchicago.edu/~lekheng/work/psapm.pdf">Hodge Laplacian on Graphs</a>（虽然很数学，但讲得尽可能浅显）</p></li></ul><h3 id="Hodge-Laplacian"><a href="#Hodge-Laplacian" class="headerlink" title="Hodge Laplacian"></a>Hodge Laplacian</h3><p>将simplicial complex应用于高阶图的<strong>关键点就在于Hodge Laplacian</strong>。这里对Hodge Laplacian背后的intuition做介绍，尽量少地涉及公式。</p><p><a href="https://zhuanlan.zhihu.com/p/350259325">图拉普拉斯矩阵</a></p><p><em>首先，Laplacian是什么？</em></p><p>教科书上的定义是：Laplacian是梯度的散度the divergence of the gradient of a function。重点，它是一种<strong>散度divergence</strong>。<strong>散度</strong>这个中文看起来可能会比较陌生，想想它的英文<strong>divergence</strong>, diverge分散，会更容易理解。考虑某种属性（对应到数学语言，就是某个函数），如果一个点倾向于把该属性分散出去，这个点的散度就是positive正的，否则就是负的。这里有个视频<a href="https://www.youtube.com/watch?v=rB83DpBJQsE&amp;t=341s">YouTube: divergence and curl</a>很形象地描述了散度是什么。Laplacian是什么的散度，它是梯度的散度。梯度又是什么？是Gradient，倾斜度，变化度，表明了一种向周围变化的方向和大小。想象河里的水流，河里某一个点上的梯度就是说，此刻这个点上的水会向哪个方向，以多快的速度进行流动。那么散度，就是把这个点周围很小的范围内的所有的水流都考虑进来，看看这个点到底是个源头（向周围增加水流）还是个sink（吸收周围的水流），又或是块平地（流进的水流和流出的水流一样多）。再推荐一个视频<a href="https://www.youtube.com/watch?v=EW08rD-GFh0&amp;list=RDCMUC4a-Gbdw7vOaccHmFo40b9g&amp;start_radio=1&amp;rv=EW08rD-GFh0&amp;t=297">YouTube: Laplacian</a>简要介绍了Laplacian。</p><p>一句话总结，Laplacian是一种散度算子，描述一个点上的某种属性（对应到函数f）向周围邻居的分散程度。</p><p><em>那么，什么是Graph Laplacian？</em></p><p>类比过来，这是针对<strong>图上的点</strong>刻画某种属性（对应到函数f）分散程度divergence的一种算子operator。这篇文章<a href="https://zhuanlan.zhihu.com/p/368878987">知乎：GNN入门之路</a>给出了详细的公式和推导。这里的intuition有以下要素：</p><ul><li>针对图上的点</li><li>某种属性</li><li>分散程度</li><li>一种算子</li></ul><p>举个例子就很好理解了。假如有一个图，图上有5个点，代表5个幼儿园的小朋友。某种属性是：我给各个小朋友不同数量的巧克力。我的巧克力分配方式就可以看做一个函数，输入一个小朋友，经过我的一番思考，输出一个数字。分散程度，代表了巧克力的分散程度，也就是任给一个小朋友，他手里的巧克力是可能被同伴抢走还是他从同伴手里抢来更多的巧克力。一种算子，就是输入一个小朋友，计算这种分散程度的大小。</p><p>假如这五个小朋友叫A, B, C, D, E，我分别给他们1，2，3，4，5颗巧克力。他们不知道别人有多少巧克力，只有和对方见面后（给图上的点之间连边），才知道别人的巧克力数量。如果一个小朋友的巧克力少于对方的巧克力，他就会倾向于抢走对方的巧克力，反之，对方就会想要抢走他的巧克力。这种抢走的意愿程度和巧克力的数量差成正比。</p><p>现假设AB，AC，AE，BE，CD和DE见过面。那么A的巧克力分散程度就是(1-2) + (1-3) + (1-5)=-7，同理B是(2-1)+(2-5) = -2, C是(3-1)+(3-4)=1，D是(4-3)+(4-5)=0，E是(5-1)+(5-4)=5。简言之，E的巧克力更可能分散，A更可能聚集巧克力。</p><p>这里的计算思路就是站在每一个点的立场上，计算它的属性值和所有的邻居的属性值之间的差异。这就是Graph Laplacian的意义。数学推导后的公式就是$L = D- A$，L是Laplacian矩阵，D是度对角矩阵，A是邻接矩阵。更进一步，对L进行正则化normalize，就和上述“梯度的散度”的数学公式如出一辙了。（graph里的求和和连续的Laplacian里的求导，都可以看成是聚合信息的一种方式。对L进行normalize之后，求和和求导就更类似了。）</p><p>为了顺利过渡到Hodge Laplacian，现在从关系矩阵incidence matrix的角度来理解$L$。</p><p>关于图Laplacian有个性质是$L = BB^\top = D-A$，这里的$B\in V\times E$是incidence matrix。它的数学定义是：刻画点和边的关系，为边定义了方向，从出发节点到到达节点。行是节点，列是边；项是0，1或-1。一条边的出发节点为1，到达节点为-1。（有的地方也用转置了的定义，差别不大）</p><p>我不展开数学公式推理，而是从直观的角度理解$LX=BB^\top X$，还是拿上面小朋友中的A举例，原来的计算方式是A直接看到B，C和E手里有多少巧克力，而现在相当于引入了一个中介：边。A不是直接看到B，而是看到他和B之间有一条边AB，他告诉了AB他手里有多少巧克力。同样的，A告诉了所有他看到的边AC和AE。第一轮是所有点告诉所有与之相连的中介（边），然后每条边都有了自己的汇总信息$B^\top X$。第二轮是所有的边再把汇总后的信息转达给与之相连的点$B(B^\top X)$，比如A又从AB, AC和AE这三条边上获取汇总后的信息，计算出他的分散程度。</p><p>至于为什么incidence matrix里要为边定义方向，你可以理解为是一个边对它的两个点的不同“暗号”（编解码方式）。拿一条边AC举例，这条边分别从A和C处收集信息知道A有1个巧克力，C有3个巧克力，AC这条边关注的是差值。假如A对应的是1，C对应的是-1，那么AC汇总后的信息就是1-3=-2。对于这个-2，点A和点C也要以不同的方式来解读，点A用$1*(-2)=-2$，得到它的分散程度是负的，点C则用它的$-1*(-2)=2$，得到正的分散程度。这就是预先规定方向的必要性。</p><p><em>从Graph Laplacian到Hodge Laplacian</em></p><p>先给出Hodge Laplacian的数学定义<br>$$<br>L_0 = B_1B_1^\top<br>$$</p><p>$$<br>L_k = B_k^\top B_k + B_{k+1}B_{k+1}^\top, k = 1,\cdots, K-1<br>$$</p><p>$$<br>L_K = B_K^\top B_K<br>$$</p><p>这里的$L_k$表示不同度数的simplex对应的Laplacian矩阵，比如$L_0$对应0-simplex（点）也就是传统的Graph Laplacian，$L_1$对应以1-simplex（边）为对象的Laplacian。</p><p>$B_k$代表$k$-simplex和$k-1$-simplex之间的incidence matrix。</p><p>重点介绍如何理解$L_1$，其他度数的simplex很容易类推。</p><p>依然坚持Laplacian的理解要点“一个点的某种属性向周围邻居的分散程度”。这里的“点”，不再局限于图中的点vertices，而是拓展为一个对象unit，比如在超图中，$L_1$表示我们将从边的角度，关注信号是如何在边之间传播的，那这里的unit就是边，而不是vertices。</p><p>第二个要点是“中介”的思想。站在边1-simplex的角度上，信号在边与边之间传播，需要哪些中介呢？答案是点0-simplex和三角形2-simplex。</p><p>正如信号在点与点之间传播，其实是借助点和点之间相连的边来实现的，点0-simplex和三角形2-simplex是边们1-simplex之间相互连接的方式。一个点在所有以它为端点的边之间建立起了联系，一个三角形2-simplex包含三条边，这三条边之间也因为这个三角形建立起了关系。</p><ul><li>边通过点之间进行信号传播，又被定义为$L^{down}=B_k^\top B_k$</li><li>边通过三角形之间进行信号传播，又被定义为$L^{up}=B_{k+1} B_{k+1}^\top$</li></ul><p>综上，就是hodge laplacian在边上的定义$L_1$。以此拓展出去，可以得到信号在三角形之间传播的laplacian等等。</p><h1 id="Simplicial-complex的工作实践"><a href="#Simplicial-complex的工作实践" class="headerlink" title="Simplicial complex的工作实践"></a>Simplicial complex的工作实践</h1><p>目前在超图领域，simplicial cimplex主要被用于解决以下问题：预测点、边、三角形上的缺失信号，特别是流（边）上的信号。</p><p>代表论文有：</p><ul><li><a href="http://arxiv.org/abs/2010.03633">simplicial neural networks</a></li><li><a href="http://arxiv.org/abs/1912.02354">HodgeNet: Graph Neural Networks for Edge Data</a></li><li><a href="http://arxiv.org/abs/1807.05044">Random Walks on Simplicial Complexes and the normalized Hodge 1-Laplacian</a></li><li><a href="http://arxiv.org/abs/1802.06916">Simplicial Closure and higher-order link prediction</a></li><li><a href="https://ieeexplore.ieee.org/document/9244649">Topological Signal Processing: Making Sense of Data Building on Multiway Relations</a></li></ul><p>我在thesis的准备阶段探索体会是，simplicial complex虽然有很好的理论基础，但仍有相当多的局限性：</p><ul><li>目前为止，缺少良好定义的任务和数据集</li><li>从理论上讲，simplicial complex：<ul><li>对数据的“整齐度”要求很大，考察对象为同类型的simplex间的信号传播，比如0-simplex之间，1-simplex之间，2-simplex之间。而这么整齐的数据局限在特定领域中。像社交网络中的群组常常拥有不同的规模。</li><li>当k很大时，数据量太大。由于simplicial complex对任一子集的封闭要求，假如考察10-simplex之间的信号传播，每一个10-simplex都要求它的$\binom {11} {2}=55$个1-simplex，$\binom {11} {4}=330$个3-simplex必须存在。这在计算量的角度很不友好。</li></ul></li></ul><p>这个领域比较小众。以上分享均为个人见解，欢迎提出讨论和批评指正。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><strong>Networks beyond pairwise interactions: Structure and dynamics</strong>, <em>Battiston, Federico and Cencetti, Giulia and Iacopini, Iacopo and Latora, Vito and Lucas, Maxime and Patania, Alice and Young, Jean-Gabriel and Petri, Giovanni</em>, 2020</li><li><strong>Hypergraph Neural Networks</strong>, <em>Yifan Feng, Haoxuan You, Zizhao Zhang, Rongrong Ji, Yue Gao</em>, 2019</li><li><strong>HyperGCN: A New Method For Training Graph Convolutional Networks on Hypergraphs</strong>, <em>Naganand Yadati, Madhav Nimishakavi, Prateek Yadav, Vikram Nitin, Anand Louis, Partha Talukdar,</em> NIPS2019</li><li><strong>NHP: Neural Hypergraph Link Prediction</strong>, <em>Yadati, Naganand and Nitin, Vikram and Nimishakavi, Madhav and Yadav, Prateek and Louis, Anand and Talukdar, Partha,</em> CIKM2020</li><li><strong>Hypergraph convolution and hypergraph attention</strong>,  <em>Song Bai, Feihu Zhang , Philip H. S. Torr,</em> 2019</li><li><a href="https://zhuanlan.zhihu.com/p/78466344">知乎：从源头探讨GCN的行文思路</a></li><li><a href="https://encyclopediaofmath.org/index.php?title=Simplicial_complex">Encyclopedia: simplicial complex</a></li><li><a href="https://www.youtube.com/watch?v=rlI1KOo1gp4">YouTube: Simplicial Complexes</a></li><li><strong>Hodge Laplacian on Graphs,</strong> <em>Lek-Heng Lim</em>, 2019</li><li><a href="https://zhuanlan.zhihu.com/p/350259325">知乎：图拉普拉斯矩阵</a></li><li><a href="https://www.youtube.com/watch?v=rB83DpBJQsE&amp;t=341s">YouTube: divergence and curl</a></li><li><a href="https://www.youtube.com/watch?v=EW08rD-GFh0&amp;list=RDCMUC4a-Gbdw7vOaccHmFo40b9g&amp;start_radio=1&amp;rv=EW08rD-GFh0&amp;t=297">YouTube: Laplacian</a></li><li><a href="https://zhuanlan.zhihu.com/p/368878987">知乎：GNN入门之路</a></li><li><strong>Simplicial Neural Networks,</strong>  <em>Stefania Ebli and Michael Defferrard, Gard Spreemann</em>. CoRR 2020.</li><li><strong>HodgeNet: Graph Neural Networks for Edge Data,</strong> <em>T. Mitchell Roddenberry and Santiago Segarra,</em> 2019</li><li><strong>Random Walks on Simplicial Complexes and the normalized Hodge 1-Laplacian,</strong>  <em>Michael T. Schaub, Austin R. Benson, Paul Horn , Gabor Lippner and  Ali Jadbabaie</em>, CoRR2018</li><li><strong>Simplicial Closure and higher-order link prediction,</strong> <em>Austin R. Benson, Rediet Abebe, Michael T. Schaub, Ali Jadbabaie, Jon Kleinberg,</em> CoRR2018</li><li><strong>Topological Signal Processing: Making Sense of Data Building on Multiway Relations,</strong> <em>Barbarossa, Sergio and Sardellitti, Stefania,</em> IEEE2020</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在准备master thesis的时候，第一个选题是希望利用simplicial complex结合GNN在hypergraph领域做些理论突破。现回顾梳理在GNN中使用simplicial相关理论的研究思路和代表性工作。&lt;/p&gt;
&lt;p&gt;本文按照“明确问题——理论方案——</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="GNN" scheme="https://fuguigui.github.io/tags/GNN/"/>
    
    <category term="High-order graph" scheme="https://fuguigui.github.io/tags/High-order-graph/"/>
    
    <category term="Simplicial complex" scheme="https://fuguigui.github.io/tags/Simplicial-complex/"/>
    
    <category term="thesis" scheme="https://fuguigui.github.io/tags/thesis/"/>
    
  </entry>
  
  <entry>
    <title>花花西陆·序</title>
    <link href="https://fuguigui.github.io/hua-hua-xi-lu-xu/"/>
    <id>https://fuguigui.github.io/hua-hua-xi-lu-xu/</id>
    <published>2021-08-16T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>从欧洲回国已将近一个月了。我仍不时念起过去三年里，在瑞士和其他欧洲国家的点点滴滴。如今退一步，以一种更宏观的视角细品这些日子，竟咂摸出些新的滋味，关于自己关于社会，对历史对未来。突然，脑中蹦出一个大胆的念头，“记录我在欧洲的点滴经历和体验”，与你共享。这个西陆尽头的花花世界，已有无数文化名人为其倾墨，留下了诸多脍炙人口的名篇。其主题深度和文笔功夫都是我无法企及的。在此，我想以一名留学生的视角，记述我在欧洲的真实经历和观念上的成长。一步步踩过的路，铺就了内心探途。</p><p>18年的9月，我生平第一次踏上亚欧大陆的西部。对于欧洲，二十几年来，常闻其名，未见其“人”。我怀揣初恋般的期待和幻想，开启了一段独一无二的生活冒险。和所有闯入异乡的人一样，我经历着新鲜、探寻、融合与比较。新鲜，为蓦然现于眼前的一座座史书中的城市，为奶香中夹带咸腥的芝士和丝滑却酸苦的巧克力，为硬邦邦的德语高贵的法语和重音分明节奏欢快的意大利语。顺着这些画面味道声音的线索，我开始探寻当地人的生活模式。许许多多的小细节向我揭示出这个模式的构成元素，譬如一个庞大却严格踩点的交通系统，譬如近乎强迫症式的垃圾分类与回收，譬如欧洲杯期间，酒吧里直播的大电视和聚在一起喝酒欢呼的老老少少。我拿起一个个片段，像拼拼图一样，慢慢拼凑出我眼中的这片土地，和土地上的人们。我不满足于远观，而要去走近、走进，把这些元素融入自己的生活，把辉煌跌宕的历史传说融入我看到的当下。于是，我在每次购物时说danke schön，在寒冷的冬天吃芝士火锅，在阿尔卑斯山的脊背上行走歌唱，在一座座教堂里用指尖去触碰虔诚的信仰。新冠疫情期间，中西方经历了一场多角度的比较。我在不同的高峰期分别生活在这两片土地上，亲身感受了大家不同的抗疫态度和方式，而其背后的价值观念和文化思想更是值得玩味。</p><p>三年的时间里，我贪婪地把自己沉浸在这片花花西陆。走过了一些路，仍有更多的未知要探索；从当今人们的生活风貌里，瞥见了漫漫历史的影子；在出走异乡的同时，也在探索自己的内心探索中国的厚重。</p><p>在此奉上些许见闻札记，望共享。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从欧洲回国已将近一个月了。我仍不时念起过去三年里，在瑞士和其他欧洲国家的点点滴滴。如今退一步，以一种更宏观的视角细品这些日子，竟咂摸出些新的滋味，关于自己关于社会，对历史对未来。突然，脑中蹦出一个大胆的念头，“记录我在欧洲的点滴经历和体验”，与你共享。这个西陆尽头的花花世界</summary>
      
    
    
    
    <category term="Literature" scheme="https://fuguigui.github.io/categories/Literature/"/>
    
    
    <category term="Travel" scheme="https://fuguigui.github.io/tags/Travel/"/>
    
    <category term="Europe" scheme="https://fuguigui.github.io/tags/Europe/"/>
    
  </entry>
  
  <entry>
    <title>读书：如何阅读一本书</title>
    <link href="https://fuguigui.github.io/du-shu-ru-he-yue-du-yi-ben-shu/"/>
    <id>https://fuguigui.github.io/du-shu-ru-he-yue-du-yi-ben-shu/</id>
    <published>2021-08-14T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.703Z</updated>
    
    <content type="html"><![CDATA[<p>如何阅读一本书</p><p>作者：【美】Mortimer J. Adler, Charles Wright Mills</p><p><img src="%E5%A6%82%E4%BD%95%E8%AF%BB%E4%B9%A6.png" alt="如何阅读一本书"></p><p>一句话总结：这本书主要论述了什么是阅读，以及有效阅读的方法。</p><p>作者将阅读方法由基础到深入总结为四类：基础阅读，检视阅读，分析阅读和主题阅读，涵盖内容从字句的理解，到文章概览，到分析整本书和比较理解同一主题下的多本书。</p><p>作为一本<strong>实用性的书</strong>，作者针对每种不同的阅读类型提供了一系列可操作性的方法。此外，还针对不同类型的书籍，详细给出阅读指导意见。这一部分可用作工具书，在以后需要时进行参考。</p><p>这本书与我有什么关系？对我的阅读观念和习惯起到了很大的改善。譬如，本次的读书总结就直接利用了书中所说的方法，一句话总结全书内容和回答与我有什么关系。可以使我更有效率更有章法地选书和读书，且不必落入生硬读书的“书呆子”里。书中所讲的条条框框不必严格一一执行，更多地应内化为指导思想。</p><h1 id="有意思的观点"><a href="#有意思的观点" class="headerlink" title="有意思的观点"></a>有意思的观点</h1><p>“沟通”（communication）这个字，字根来自“共通”（common）。我们谈一个社群（community），就是一群有共通性的人。而沟通是一个人努力想要跟别人（也可能是动物或机器）分享他的知识、判断与情绪。</p><p>一本书之所以能给你带来新的洞察力或启发，就是因为其中有一些你不能一读即懂的字句。</p><p>阅读的一部分本质就是被困惑，而且知道自己被困惑。</p><p>受教通常与卑躬屈膝混为一谈。一个人如果被动又顺从，可能就会被误解为他是受教的人。相反的，受教或是能学习是一种极为主动的美德。一个人如果不能自动自发地运用独立的判断力，他根本就不可能学习到任何东西。或许他可以受训练，却不能受教。因此，最能学习的读者，也就是最能批评的读者。</p><p>放入两张总结图。</p><p>第一张来自于xmind官网，属简要概括型笔记。</p><p><img src="%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6.png" alt="如何阅读一本书大纲导图"></p><p>第二张来自于我的读书摘抄。是大纲加内容摘抄。</p><p><img src="%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E6%88%91.png" alt="如何阅读一本书大纲笔记（我）"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何阅读一本书&lt;/p&gt;
&lt;p&gt;作者：【美】Mortimer J. Adler, Charles Wright Mills&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;%E5%A6%82%E4%BD%95%E8%AF%BB%E4%B9%A6.png&quot; alt=&quot;如何阅读一本书&quot;&gt;&lt;/p</summary>
      
    
    
    
    <category term="Reading Summary" scheme="https://fuguigui.github.io/categories/Reading-Summary/"/>
    
    
    <category term="Book" scheme="https://fuguigui.github.io/tags/Book/"/>
    
    <category term="Tips" scheme="https://fuguigui.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>在ETH Zurich就读体验</title>
    <link href="https://fuguigui.github.io/zai-eth-zurich-jiu-du-ti-yan/"/>
    <id>https://fuguigui.github.io/zai-eth-zurich-jiu-du-ti-yan/</id>
    <published>2021-08-13T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>答主刚刚从ETH毕业回国，拿到了Data Science Master的学位。在写这篇分享之前，我仔细拜读了前辈们的回答，十分详尽，内容涵盖从本科到博士博后，大力推荐。在此，我以Master的视角来分享，特别是分享些有关Data Science Master的学习生活体验，希望能为有意愿来ETH就读的学弟学妹们提供参考，也为ETH吸引更多中国小伙伴。本篇分享主要包括：</p><ul><li>学校介绍和专业录取</li><li>专业学习情况</li><li>学校活动</li><li>生活文化体验</li><li>毕业后就业</li></ul><h1 id="学校介绍和专业录取"><a href="#学校介绍和专业录取" class="headerlink" title="学校介绍和专业录取"></a>学校介绍和专业录取</h1><p>ETH Zurich是一所位于瑞士德语区，汇聚了欧洲甚至世界大量顶尖人才的理工学院，众人皆知的爱因斯坦，中学毕业之后，就是来ETH读的书。现在，在学校食堂，咖啡馆等场所还能看到各种画着爱因斯坦的海报，各种校园活动也很喜欢用爱因斯坦做“代言人”，把他画在宣传贴画上。在近几年的QS全球大学排行榜上，ETH Zurich不论是整体排名还是CS专业排名都位于全球前10。教学质量和资源在整个欧洲都是数一数二的，我的专业同学大部分来自于欧洲的各个国家，对ETH的认可度和仰慕度非常高。</p><h2 id="专业录取"><a href="#专业录取" class="headerlink" title="专业录取"></a>专业录取</h2><p>我就读的Data Science Master专业，是一个比较新的硕士项目，于2017年才招收第一届学生，我有幸在18年被录取入学。这个专业是由D-INFK（计算机院），D-MATH（数学学院）和D-ITEE（对应到国内的EE？）联合开设的，主要还是归属于D-INFK下，专业的行政人员、管理人员、学生会组织都在D-INFK下，和ETH的CS硕士项目像亲兄弟。普遍来说，ETH的master项目是教学类型的，项目学分大部分都需要通过上课考试获得。在完成学习任务之余，也可参与研究工作，去实验室当个助理或者选一门semester project/research project做科研项目等。</p><p>Data Science Master项目可能因为比较新，招生规模比较小。17年第一届的招生规模是二十多人，我们第二届的人数略有增加，三十人，19届20届规模继续扩大。中国学生人数也在稳步增长，最开始只有两三人，现在已经有十几个了？相比之下，兄弟项目CS同期的招生规模都在百人以上，队伍明显壮大很多。</p><p>ETH master项目录取的整体风格都很看重专业匹配度，这一点在申请时填写长长的已修课程介绍列表就能体现出来。如果专业先修要求这一部分不达标，基本上就很难通过申请。所以，在申请各个项目前一定要仔细阅读先修要求。只有少数几门先修课没上过的话，学校会在录取后，给你开一个补课列表，需要你开学后自行参加这些课程，不计算在项目学分内。在我们这一届的录取学生中，大家的本科背景主要是三个专业：CS，数学和Engineering，很多人还有另一个专业的辅修或双学位背景。所有生源中，亚洲人有几个，来自ETH本校的本科生也有几个，剩下大部分都来自欧洲的其他国家，像是意大利，法国，德国，匈牙利等。据在ETH就读本科的专业同学说，Data Science的录取竞争很激烈，要求十分严格，考量标准多元，很多表现优异的ETH本校本科生也没能通过录取。估计，这几年随着项目规模的扩大，竞争会有所缓和。</p><h1 id="专业学习情况"><a href="#专业学习情况" class="headerlink" title="专业学习情况"></a>专业学习情况</h1><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><p>Data Science Master总体要求120学分，官方推荐2年修完，最长可延长至四年，我实际用了近三年的时间完成项目（也因为疫情20年3月回国呆了半年多，耽误了进度），上一届的一名中国的大神学长用了近两年时间毕业，成了本专业第一名毕业的学生。学分细节要求可以参考项目官网<a href="https://ethz.ch/content/dam/ethz/special-interest/infk/department/Images%20and%20Content/Studies/Master/DS/Study_Guide_MSc_DS_Content.pdf">ETH Data Science Master study guide</a>。ETH的学分这么定义的the number of weekly hours。基本上可以理解为1学分代表1周要花1小时，我的实际经历中学分定义存在一定偏差，比如当年我选修的Big Data为8学分，但实际的工作量超过每周8小时，不过这门课从2020年起改成了10学分，也有些课，实际课业耗时会比学分定义来得轻松。总之，课程学分只是一个参考值，具体情况还得具体分析。</p><p>再说些专业内部的课程设置。Data Science项目中的必修部分是：CS和Statistics相关的专业课，一门Data Science Lab，一门讨论班，和最后30学分的thesis。每个学生还需要选择一个应用领域的专攻方向，并在此方向修满一定数量的学分。目前DS开设的方向有，计算生物学，计算机网络，金融保险，地理信息系统，法律政策与创新，神经信息处理，社交网络，交通规划系统和天气气候系统。此外是一些人文社科等通识选修课，有少量学分要求。</p><p>DS专业必修课程与CS Master，RSC Master，Statistics Master，CBB Master的重合度很高。常常能在这些课的课堂上见到来自上述专业的小伙伴们。ETH与其邻居UZH的关系十分密切，很多选课互相开放，我在课程项目里也多次和来自UZH的小伙伴们合作。</p><h2 id="学习体验"><a href="#学习体验" class="headerlink" title="学习体验"></a>学习体验</h2><p>回顾整个硕士阶段的学习体验，可以概括为两个字“硬核”。我的本科背景是国内Top2数学专业，来了ETH之后，深感学业压力。很多老师自己写教材，对上课内容了如指掌，理论性体系性非常强。第一个学期，我试探性地修了24学分和一门德语课。讲道理课业压力应该不大，开学时我还美滋滋地计划周末都要去哪儿哪儿玩。然而现实是，第一学期的周末几乎都在和小伙伴一起做作业学习中度过了。周一到周五天天去学校，下午六点前除了上课就是去图书馆看参考书籍，去机房一起做小组project，去自习区讨论问题。同学们上课非常认真，课堂的互动性很高，常常有人打断老师提问题，老师也很注重与学生之间的互动。一方面老师讲课确实很吸引人，不敢错过，另一方面周围同学的认真态度也很有感染力，我在ETH生生把之前上课玩手机的坏习惯给改掉了。。大家的学习和工作方式是注重效率不拖延（maybe对于我这样的人，一旦拖延，任务就会越积越多），该学习的时候不玩，该玩的时候不学习，正如ETH宣传片里所说“work hard, play hard”。</p><p>DS的很多课是理论教学+小组/个人项目的模式。有些课会每周布置课后作业，但不是每一门课的课后作业都会记入最终的评分体系中。课后作业，更多是一种自发性的学习辅助材料。做了，可以发给助教帮忙批改，不做的话也没人监督不会扣分。可做与不做，往往能在最后的期末考试中看到区别。</p><p>讲到考试，必须详细介绍下ETH的考试季。一年中，ETH的硕士分为两个学期，秋季和春季。每学期的期末笔试分为两种类型：end-of-semester examinations和session exams。第一种考试，顾名思义，在每学期结束的时候进行，类似于国内很多大学的期末考时间。比如秋季学期的授课时间是9月中到圣诞节前，这种end-of-semester examinations就会发生在圣诞节前的最后两周。我经历的很多选修课，通识课都会在这个时间段考掉。第二种考试session exams，也是ETH的真正奇葩考试季，是在当前学期的假期结束后，下一个学期开始前进行。对于12月末放假的秋季学期来说，该学期的session exams会在第二年的1月-2月左右进行，春季学期的session exams则会在8月-9月进行。往往是专业必修课等学分多，任务重的“大”课会安排session exams。这意味着什么？意味着，寒暑假当即减半。我19年7月将近一个月都在学校备考，工作日去CS图书馆（特别小的一间屋子）比学期内上课都早，因为图书馆常常在开门半小时内就没位置了。7月准备了一个月，8月整个考试月把几门课考掉，再休息两周，欢欢喜喜迎来新学期。</p><h1 id="课余活动"><a href="#课余活动" class="headerlink" title="课余活动"></a>课余活动</h1><p>ETH绕不开的课余活动就是ASVZ了。ASVZ是一家专门给高校提供健身活动课程的机构。它提供的课程之丰富，群众参与度之高，都是我非常喜欢的。还没有疫情的时候，每个工作日下午五六点后，Polyterrasse健身房活动室都是人挤人，连空的衣物存储柜都很难找到。在ETH读过书的小伙伴，应该都知道ASVZ的(Super)Kondi课，综合身体素质训练，我第一次参加，老命差点都跳没了。周围的小哥哥小姐姐大爷大妈们，一个个可带劲儿地享受着。ASVZ提供一些自我训练的健身器材，还提供一百多种的体育教学课程。从学期内常规的课程，比如有氧，搏击，芭蕾，攀岩，跑酷到假期内的连续性项目，比如水上滑板冲浪等，应有尽有。说实话，我为自己安排ASVZ课程的热情一度超过安排学习内容。要参加ASVZ的服务，需要成为它的会员，对Bachelor/Master学生来说，这个会员身份包含在校园卡里了，每学期应该是三十瑞法，交学费的时候一并交了，然后就能享受整整一个学期的健身房和健身课程，几乎可以说是免费了（除了个别假期的项目会额外收费）。</p><p>此外的课余活动主要来自VSETH（ETH学生会），各个院的学生社团和其他学生组织。VIS（CS学生会）学期初会组织迎新BBQ，学期末最后一个周五会有免费的brunch，疫情前春季学期末还会组织全院的同学去猫湖BBQ。平时也几乎周周有活动，讲座，宣讲会，hackthon，datathon等，可以把课余生活过得很充实。</p><p>再多提一个活动polyball，这是个充满了故事的舞会，一年一度（疫情前）。学生教授校友都会穿上舞裙西装来参加。据说很多教授夫妇们是在舞会上开始恋情的。整个ETH主楼都会被装饰，主楼的不同区域有多种舞蹈音乐风格，还有脱口秀，吉他演奏等小节目。Polyterrasse的篮球操场会被改造为一个超大的舞池，集体跳舞，大家能从晚上嗨到凌晨。Tip：Polyball的门票还是很贵的，也有人选择为polyball做志愿服务减免一些门票开销。</p><h1 id="生活文化体验"><a href="#生活文化体验" class="headerlink" title="生活文化体验"></a>生活文化体验</h1><p>下一个想分享的是在苏黎世的生活文化体验。选择来一所学校就读，间接地就意味着选择了当地的生活方式。我很享受在苏黎世的便捷生活，不论是城市基础设施还是人文历史自然旅游资源，都无可挑剔。首先，讲讲经济花销。</p><h2 id="生活开支"><a href="#生活开支" class="headerlink" title="生活开支"></a>生活开支</h2><p>瑞士的物价是全球出了名的高，之前有很多学弟学妹们咨询过我开销的问题。然而事实上，整个开销其实相对于美国读硕士要少很多。首先，ETH读书的学费是真的很低，不同于大多数美国硕士按学分收费，ETH是按照学期收费，一个学期是七百多瑞法，按7的汇率换成人民币的话，是四五千人民币一学期。这个费用大部分家庭应该都能接受。在ETH读书，大头开支是生活费，住房吃饭和交通。一学期的学费会比一个月的生活费还少。最主要的房租，其实浮动范围也很大，最便宜的学生宿舍不到四百瑞法一个月，常见的学生宿舍/在外合租公寓大部分价格在七百到九百瑞法一个月，好一些的studio会达到一千多瑞法一个月。住宿条件优劣不一，不过这方面个人可根据自己的能力选择。吃饭也是一样，学校食堂的饭多在7-10瑞法一顿，在餐馆可以20瑞法起步吧，如果选择自己做饭的话，会便宜很多，购物选择Aldi/Lidl等折扣超市的话，又可以节省很多。最便宜的预算每月三百瑞法足以喂饱自己了。交通通讯这种也有很大的自主选择空间，不赘述。</p><p>说完开销之后，再说说收入。在ETH读硕士也是可以赚取一笔可观的零用钱的。学校在申请时提供一种ESOP奖学金，每学期提供12000瑞法同时豁免学费，持续三到四个学期。基本上拿到这种奖学金来ETH读书，不但不用付钱还能收获一笔。ESOP是基于本科时候的表现来评判的。如果入学时没有拿到ESOP也不要紧，在前两个学期结束后，学业表现达到一定要求还能继续申请学校的资助，之后每学期也能收获一笔可观的资助。除了奖学金助学金之外，在ETH当学生助理/助教也有一定的报酬，时薪扣了税之后，在二十多不到三十瑞法。学期内做助理有每周时长限制，假期中就没有限制了。学业之外有额外精力，可以联系喜欢的实验室看看有没有助理职务。我们常常开玩笑说，ETH不缺的就是钱，要相信瑞士的经济实力。</p><h2 id="当地文化"><a href="#当地文化" class="headerlink" title="当地文化"></a>当地文化</h2><p>苏黎世在德语区，处处体现着德国人的严谨，独立和对规则的崇尚。我一开始挺不适应苏黎世的条条框框，做什么事情都要严格遵循规则来，对约定的时间要严格遵守。但后来逐渐习惯，慢慢喜欢上了这种生活方式，对个人生活确实带来了极大的便利。在苏黎世的生活体验如果展开了说，可以写成好多篇小作文。这里只选取几大点，概述我的生活体验。</p><p>第一点是时间管理。作为世界闻名的手表大国，当地人的时间管理堪称master级别。最直观的在搭乘公共交通时就能体会到。电车公交小火车严格遵守时刻表，精确到以分钟为单位，市区内不同车的中转衔接也都控制的很到位。大到年度时间管理，例如各个社区回收不同垃圾的日程，工作日节假日的车次安排等。</p><p>第二点是严格遵循规则。我第一个面对的就是丢垃圾的规则。垃圾分类在中国也开始实行了，但是在公民执行的动力和精细程度上，远不在一个level上。日常要配备的垃圾袋有：巨贵的Zurichsack装杂物垃圾，生物垃圾（食物残渣等）专门丢一个垃圾桶，纸/纸板丢一个垃圾桶，塑料瓶分透明不透明丢在不同地方，铝制品丢一个，玻璃瓶分白绿棕颜色丢在不同地方。此外还有专门的地方或者小电车回收家具，家电等，绝不能乱扔。类似的要严格遵守的还有交通出行规则，房屋出租退房等。一般来说，苏黎世人会主动仔细地介绍各种规则，大家都自觉遵守确实会给生活带来很大便利。</p><p>还有就是浓烈的运动氛围，特别是户外运动。双休日，特别是周日超市商店不开门，大家特别喜欢朝户外跑，徒步骑车或者攀岩。滑雪季的时候，早晚在火车站总能看到拿着滑雪装备的人。瑞士的自然景观条件相当优秀，路线开发出行服务也很成熟，是个进行户外运动的绝佳地点。</p><p>最后想说的就是，瑞士处在欧洲的中部，对热爱旅游的小伙伴来说，是个周游欧洲的绝佳位置。从瑞士出来就是法国，德国，意大利，奥地利。再远一点去西班牙，葡萄牙，荷兰，东欧各国都不会很远。再加上瑞士自身的国际氛围浓厚，人文艺术资源丰富，简直是个旅游天堂。不过这两年因为疫情，旅游得慎重。希望疫情快快过去。</p><h1 id="毕业去向"><a href="#毕业去向" class="headerlink" title="毕业去向"></a>毕业去向</h1><p>这一点，相信很多来ETH读Master的同学都很关心。我自己也花了很大一部分时间和精力在这上面。虽然最终我没有留在瑞士，而是选择毕业后先回国工作（某种程度上也是受疫情影响），但仍想把了解到的信息和大家分享。</p><p>在瑞士工作是一个非常香的选择，work-life balance，巨高的时薪，合适的税率，舒适的工作条件等等等等。但是作为一名中国人，硕士毕业后留在瑞士工作是存在一定难度的。这个难度主要来自于移民局的工作签证。对于非瑞士或者欧盟的居民来说，每年各个州的工作签证是有限额的，申请工作签证必须在限额没用完之前。雇佣你的公司需要向移民局提出申请，并证明“There is nobody available in Switzerland or any EU/EFTA country for the job”。这一点就很玄，很多公司也因此不太愿意为刚毕业的同学申请工作签。比如了解到的狗家，更愿意为senior level的人申请工作签，而非刚毕业的同学，哪怕是在ETH就读。对于跨国公司还好，很多瑞士本土的公司还会有语言要求，比如德语/法语/意语达到一定水准，所以有意留瑞士工作的小伙伴可针对目标公司，提前准备语言。在瑞士拥有学生签的人，在毕业后还可以使用六个月的学生签来找工作。对于想在学期内找实习的小伙伴来说，如果你的学期项目包含强制实习，在瑞士境内的公司实习的成功率会大很多。遗憾的是，目前DS的项目里并不包含强制实习，如此来说，许多公司也不太愿意帮助申请工作许可。</p><p>以上都是官方说法，我认识的同学中，毕业后留瑞士的人大多数是以继续读PhD的方式，对于科研有热情的同学，读PhD真的是一个很棒的选择，ETH/UZH/EPFL等有着非常优质的教学资源和令人羡慕的工资。成功留在瑞士工作的也有不少小伙伴，所以大家也不用担心之前讲的工作签是完全不可行的。还有一大部分同学会去欧洲的其他国家工作或读博，比如德国英国荷兰等。ETH在欧洲的认可度是很高哒。再有就是像我这种，回国工作。（希望以后有机会能回到瑞士工作）</p><p>以上就是我在ETH读DS Master的经验分享，希望能对大家了解ETH提供有用信息，也欢迎大家来到ETH读书/工作！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;答主刚刚从ETH毕业回国，拿到了Data Science Master的学位。在写这篇分享之前，我仔细拜读了前辈们的回答，十分详尽，内容涵盖从本科到博士博后，大力推荐。在此，我以Master的视角来分享，特别是分享些有关Data Science Master的学习生活体验，</summary>
      
    
    
    
    <category term="Sharing" scheme="https://fuguigui.github.io/categories/Sharing/"/>
    
    
    <category term="Swiss" scheme="https://fuguigui.github.io/tags/Swiss/"/>
    
  </entry>
  
  <entry>
    <title>读书：建筑也可以很好玩：欧洲篇</title>
    <link href="https://fuguigui.github.io/du-shu-jian-zhu-ye-ke-yi-hen-hao-wan/"/>
    <id>https://fuguigui.github.io/du-shu-jian-zhu-ye-ke-yi-hen-hao-wan/</id>
    <published>2021-08-09T04:00:00.000Z</published>
    <updated>2024-09-01T22:36:56.721Z</updated>
    
    <content type="html"><![CDATA[<p>建筑也可以很好玩：欧洲篇：从古希腊到文艺复兴</p><p>建筑也可以很好玩：欧洲篇：从古典主义到近现代</p><p>作者：密小斯</p><p><img src="%E5%BB%BA%E7%AD%911.png" alt="建筑也可以很好玩：欧洲篇：从古希腊到文艺复兴"></p><p><img src="%E5%BB%BA%E7%AD%912.png" alt="建筑也可以很好玩：欧洲篇：从古典主义到近现代"></p><p>关于欧洲建筑历史和知识的通俗读物。将建筑的历史背景，起源，功能，特点，影响有机地结合起来，不枯燥且有逻辑，同时配以简明有趣的图辅助理解。作者常利用讲故事的方式展开介绍，很有意思。我这种外行人表示学到了很多，能试着开始去理解建筑，进而欣赏建筑。阅读这两本书之后，我一方面积累了些欧洲建筑的基本知识，另一方面学会了欣赏建筑的一些方法论：从材料，功能，历史人文，物理结构多个角度切入。在欧洲旅游的时候，不再是一脸懵逼了，很喜欢。</p><p>牢记古希腊的维特鲁威在《建筑十书》中说的：</p><blockquote><p> 建筑的三大终极定律：坚固，美观，实用</p></blockquote><p>这本书的笔记分为以下几个部分：</p><ul><li>各种建筑风格/元素笔记</li><li>具体建筑作品笔记</li><li>整体概览图</li></ul><p>重点挑了我喜欢的或者熟悉的建筑内容做笔记摘抄，至于偏现代的建筑，也没怎么看过，做了笔记也没有印象 <span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，很多就略过了。。。</p><h1 id="建筑风格-元素"><a href="#建筑风格-元素" class="headerlink" title="建筑风格/元素"></a>建筑风格/元素</h1><table><thead><tr><th>是什么</th><th>时间</th><th>为何产生/历史背景</th><th>特点/风格</th><th>运用/发展</th></tr></thead><tbody><tr><td>神庙</td><td>公元前9-公元前6世纪</td><td>古希腊人心目中神偶尔居住的地方。古希腊人是相信世界上有神的，但是神和人并没有地位上的高下之分，只是能力更强大一些。</td><td>从氏族领袖的住宅改建而来，规模不大，与住宅相似</td><td>有的神庙中间纵向加一排列柱，以增大宽度；有的建筑外侧有外廊</td></tr><tr><td>几何学与数字比例</td><td>公元前9-公元前2世纪</td><td>古希腊崇尚理性主义，认为世间万物之间的关系要符合几何学才会有一种和谐的美感</td><td>黄金分割法，几何图形</td><td>柱式中的比例，神庙立面的黄金螺旋比例等</td></tr><tr><td>柱式</td><td>公元前7-公元前5世纪</td><td>早期古希腊祭祀主要在室内举行；到了后期，圣地的活动多转移到了室外，圣堂是活动广场的中心景观，外观气质很重要。<br>当时的建筑主要材料是大理石，便于雕刻，但不能做出很大的跨度。所以只能通过在建筑周围布置一圈的柱廊来增加层次感和变化。</td><td>固定的比例和使用规定</td><td>多立克柱式Doric order（西西里）：代表男性，较粗壮， 宽高比大约1:5.5，檐部厚重（约为柱子高的1/3），没有什么装饰，外形明朗的高浮雕<br>爱奥尼柱式Ionic Order（小亚细亚）：代表女性，较修长，宽高比约为1:9，檐部轻盈（约为柱子高的1/4），柱头布满细密雕刻的漩涡，像一双大眼睛或者小姐姐垂下的秀发，较浅较柔和的浅浮雕</td></tr><tr><td>雅典卫城Acropolis</td><td>公元前6世纪左右</td><td>顾名思义，用来保卫城市，防卫外地。一般会建在城市的最高处。平时作为公民祭祀和举行庆典的场所。如果打仗时，战况不利，所有人都会躲到卫城里，跟敌人打消耗战。后来守护神崇拜盛行，卫城变成了守护神的圣地，在最突出显眼的地方，建造守护神殿。</td><td>多立克柱式和爱奥尼柱式混合使用：为了解决地面高差。地势低用修长的爱奥尼柱式，地势高就用短粗的多立克柱式。</td><td>伊瑞克提翁神庙Erechtheion：西侧六根女郎柱，把女人的身体直接当作柱子的装饰。</td></tr><tr><td>公共建筑</td><td>公元1世纪前后</td><td>罗马国立强盛，出现了很多供普通老百姓使用的场所，增加了对大型公共建筑的需求</td><td>大</td><td>角斗场，浴场等</td></tr><tr><td>拱券技术</td><td>公元1世纪成熟</td><td>大型建筑场所的需求，增加了对建筑承重的要求</td><td>圆弧形的拱：一方面能够增大建筑的跨度，承受更大的压力；另一方面，拱下可以形成更大的空间。</td><td>最早用在输水道上：塞哥维亚城Segovia的输水道。从筒形拱：一个圆筒形的拱（需要很厚的承重墙，光照不进来，不透气），发展成为十字拱（两个筒形拱以90度垂直的方式交叉在一起，可用柱子作支撑，无须承重墙，透光透气），为了解决十字拱的侧推力，将十字拱相连，形成了拱顶体系</td></tr><tr><td>柱式的发展</td><td>古罗马时期</td><td>古罗马人在使用古希腊的柱式风格时，遇到了问题，主要有：1.柱式与拱券结构上存在矛盾；2.古希腊柱式与古罗马多层建筑的矛盾；3.古罗马巨大建筑的细部装饰矛盾</td><td>大建筑与柱式相融合</td><td>券柱式：在拱券结构的基础上，用柱式来装饰；<br>叠柱式：用多层叠加柱式的方法来支撑巨大的建筑，底层多立克，其上爱奥尼，再往上科林斯柱式Corinthian order<br>巨柱式：直接把柱子做大<br>塔斯干柱式Tuscan order和混合柱式：对于柱式的装饰，包括檐口，柱头，雕刻，线脚的处理等。</td></tr><tr><td>穹顶</td><td>公元1世纪</td><td>一个拱券旋转360度而成，现浇混凝土技术</td><td>建筑整体性强，跨度大</td><td>万神庙</td></tr><tr><td>巴西利卡basilica domus</td><td>4世纪的古罗马晚期</td><td>由于基督教在欧洲普遍传播，人们也需要进行宗教活动的场所。最基本的要求：一个可以聚集很多人的大空间。</td><td>普遍比较简单，内部经常用几排纵向的柱子把一个长方形的空间分成几条窄一些的空间，例如两排柱子将空间分成了三条，那中间的一条叫作“中厅”，最宽；两边的“侧廊”对称布置，窄一些。“中厅”比“侧廊”高，高出部分的两侧做出用来采光的侧窗。<br>在举行仪式的时候，教徒们要面向东方的耶路撒冷，所以圣坛在建筑的东侧，入口在西侧。</td><td>十字形，三短一长的“拉丁十字式”。到中世纪，宗教意味加重，慢慢成了当时小型教堂的代名词。</td></tr><tr><td>哥特式Goth</td><td>10世纪左右</td><td>国王和教会对建筑的要求：接近上帝。让身处教堂的人，无论是教皇/牧师还是信徒都能有一种“保送天堂”的感觉。如何达到这个目的？把教堂做高，越高越好，越高越接近上帝。</td><td>骨架券：框架结构，四个角做出拱券，石板架在拱券上。这样顶部的围护部分可以做得非常薄，既大大减轻了重量，也节省材料。<br>飞券/飞扶壁：解决骨架券遗留的最外侧侧推力的问题，把自身的结构暴露出来，重复实用产生一种向上韵律感<br>双圆心尖拱：将拱券做成两个圆心，从力学的角度，将侧推力变得更小，于是墙可以做得更薄，屋顶可以伸得更高。<br>彩色玻璃窗：圣经故事画，除了采光，还为了传播基督教。无法人手一本《圣经》，就将故事刻在教堂玻璃上。</td><td>骨架券第一次应用：1144年建成的法国的圣丹尼教堂<br>飞券的代表作：巴黎圣母院</td></tr><tr><td>东拜占庭式教堂</td><td>4-15世纪</td><td>东正教的宗教仪式主要强调信徒们<strong>亲密和谐</strong>，所有教堂内的核心往往是一个穹顶之下的大空间。东正教把穹顶越做越大，越做越高。穹顶成了整个教堂的精神中心和视觉中心。</td><td>帆拱：优雅地连接圆形穹顶和下部多边形的结构<br>鼓座：为把穹顶架高，在穹顶和帆拱之间加一圈环形墙。<br>希腊十字：用四格筒形拱顶住帆拱的四个发券外侧，解决最外侧的侧推力</td><td>意大利威尼斯：圣马可教堂<br>圣索菲亚大教堂</td></tr><tr><td>文艺复兴</td><td>14-16世纪</td><td>拜占庭灭亡和黑死病，人们开始向教权发起挑战。新兴资产阶级崛起，大量古希腊古罗马建筑遗迹被发现，《建筑十书》重新发表</td><td>矢形穹顶，柱式，拜占庭建筑风格得到发扬，学习和模仿古希腊和古罗马。哥特式遭摒弃</td><td>佛罗伦萨主教堂</td></tr><tr><td>“坦比哀多式”</td><td>15世纪</td><td>文艺复兴盛期，致敬古希腊和古罗马的建筑风格</td><td>大气稳重的形态<br>穹顶<br>古典柱廊<br>柱式的运用<br>形象鲜明/标准的半圆形穹顶作为整个建筑的统率，结合柱廊的集中式建筑形制</td><td>梵蒂冈圣彼得大教堂<br>英国的圣保罗大教堂<br>美国的国会大厦</td></tr><tr><td>巴洛克</td><td>17世纪以后</td><td>16世纪后半叶，教廷重获话语权，坚决废除人文主义的建筑形式。<br>古希腊和古罗马没啥新东西可挖了。建筑师们想创新。<br>米开朗基罗擅长雕塑，在设计建筑时会不顾建筑结构的逻辑而将大量的雕塑装饰手法运用其中，发展出一批粉丝。<br>教会越来越奢靡，相信上帝住在豪华的宫殿里。</td><td>堆砌装饰，让人“目眩”<br>雕刻充满教堂内部，分不清四面墙壁和屋顶的界线<br>色彩鲜艳，对比强烈，大量使用镀金/象牙等贵重材料<br>大量使用“双柱”。<br>巴洛克：原意：畸形的珍珠，法国人起的。</td><td>枫丹白露宫内部<br>波洛米尼的圣卡罗教堂</td></tr><tr><td>法国古典主义</td><td>17世纪以后</td><td>法国随着皇权的发展壮大，在艺术上也需要一种风格用来配合皇权的强化。法国把自己比喻成当年辉煌的罗马帝国，建筑上也需要像当年罗马盛行的雄伟大气的风格。皇帝路易十四成立了各种艺术学院，在学校里，学生们只能画两种画：歌颂古代的英雄以及颂扬伟大的君主。颂扬君主的“伟大”，逐渐形成了法国独特的宫廷文化。</td><td>看重艺术中“理性”和“条理”<br>“系统”的美学标准，“规矩”和“套路”<br>总平面上往往采用对称式布局，轴线清晰；立面通常采用“横三纵五”的分段方式，强调立面构图的主次关系。</td><td>凡尔赛宫<br>卢浮宫</td></tr><tr><td>洛可可</td><td>18世纪</td><td>建造凡尔赛宫几乎掏空了国家。18世纪初期，法国社会已经民不聊生。整个法国的上层生活糜烂。绝对君权时期讲究“威严”和“爱国”的基调已经不再受到关注，取而代之的是“轻柔”和“自在”的趣味。</td><td>以室内装饰为主<br>装饰风格倾向于自然元素，各种细密的植物草叶，贝壳的雕塑装饰<br>构件和物品的每个细节都是独一无二的，更像是自然生长出来的，而非几何化的比例和对称。<br>给人一种很“娘”的感觉，粉粉嫩嫩</td><td>罗马耶稣会教堂内部装饰</td></tr><tr><td>古典复兴</td><td>18-19世纪</td><td>资产阶级革命期间，以法国为中心，由对民主与共和的追求追溯到了老祖宗古希腊（民主）和古罗马（共和）。法国建筑也产生了代表古典复兴的两种倾向：罗马复兴和希腊复兴。</td><td>一大批仿古罗马风格的建筑，只不过建筑体量要比后者大得多。</td><td>巴黎雄师凯旋门<br>巴黎万神庙<br>大英博物馆<br>英格兰银行<br>柏林国立美术馆</td></tr><tr><td>浪漫主义</td><td>18世纪末-19世纪上半叶</td><td>英国的资产阶级革命胜利之后，大资产阶级取代了皇帝成为了国家的统治者，随手将曾经一起革命的小资产阶级与农民兄弟们丢在了一边，出现了一些乌托邦主义者，他们通过文学作品来宣扬建立一个没有压迫的和谐世界。社会的底层痛恨“机器社会”对他们的压榨，进而产生了“逃避现实”的情绪，向往回到中世纪自由的田园生活，对工业大城市充满了排斥。英国的古代文化最悠久和最灿烂的，自然是中世纪时期的哥特式风格。</td><td>以寨堡为原型<br>摒弃严格的中轴对称布局，回到了以使用功能为核心的自由式布局状态<br>用原本哥特式教堂的建筑风格去装饰非宗教建筑的处理方案：整体“直冲天际”的动势，顶部布满了大量“尖尖的”塔楼，表面细密的浮雕，布满花纹的玻璃窗。</td><td>英国伦敦大本钟<br>英国曼彻斯特市政厅<br>匈牙利国会大厦<br>英国议会大厦<br>伦敦塔桥</td></tr><tr><td>折中主义</td><td>19世纪上半叶</td><td>以美国为中心。美国从建国一开始就不存在“贵族”这个阶级。新国家迫切需要一种能被广大资产阶级接受的建筑风格，而这种风格，首先是不能使用英国的哥特式，而法国代表皇权的古典主义和巴洛克也一定要避开，所以美国的开国元勋们将学习对象大致锁定在了共和国时期的古罗马建筑上。后来与欧洲国家之间矛盾缓和，于是美国放开手脚开始将欧洲历史上各个时期的建筑“拼凑”在一起。</td><td>将欧洲历史上一千多年间各式各样的建筑风格杂糅在一起的样式：<br>希腊的庙宇、双柱、柱式、穹顶</td><td>美国国会大厦</td></tr><tr><td>钢铁与玻璃</td><td>20世纪初期</td><td>随着冶炼技术的成熟，钢铁也开始在建筑中扮演了越来越重要的角色。它的综合性能（抗拉、抗压、可塑性等）上均有较大的优势，例如可以把建筑建得更高，在跨度上也大大突破了传统的局限。<br>出现了大量新功能的建筑：百货公司、集中办公楼、火车站等。就拿火车站来说，这种建筑往往需要超级大的内部空间。</td><td>用钢铁打造框架结构，<br>框架之间的缝隙用玻璃或砖根据采光等需要来填充</td><td>伦敦水晶宫</td></tr><tr><td>工艺美术运动</td><td>19世纪下半叶以来</td><td>19世纪下半叶以来，欧美国家纷纷进入资本主义经济飞速发展的阶段。大城市的崛起速度加快，城市的规模也越来越大，由此带来了一系列规划、交通、居住等复杂的城市问题。建筑作为其中的一环，也不得不跟上城市发展的脚步。新技术新材料一波接一波地更新，它们与旧有建筑形式之间的矛盾也越来越尖锐。</td><td>功能需求作为首要的考虑，为大多数人服务<br>装饰上反对古典建筑的繁琐和堆砌<br>首次强调建筑使用功能的重要性，提倡朴实的设计<br>运用哥特式风格手法</td><td>红屋</td></tr><tr><td>新艺术运动</td><td>19世纪末20世纪初</td><td>将建筑的发展坚决地从古典中剥离出来的运动。早期还大多停留在形式上，后来逐渐发展至功能。</td><td>摒弃任何历史上的元素<br>“新风格”：当时以自然风格为主）模仿植物形态和花纹<br>喜欢曲线<br>“装饰即罪恶”</td><td>塔塞旅馆<br>德国魏玛工艺与美术学校<br>格拉斯哥艺术学院<br>斯坦霍夫教堂</td></tr><tr><td>德意志制造联盟</td><td>20世纪初</td><td>由于当时的德国的工业实力已经超过了英国和法国，所以制造联盟号召本国的设计师与工厂联合起来，进一步提升本国工业产品在世界市场上的竞争力。建筑必须与工业生产结合。</td><td>艺术和工业深度结合<br>避免政治对设计的“干扰”<br>功能至上原则，全盘接受现代工业<br>坚决抵制任何形式的装饰<br>主张标准化和批量化</td><td>德国科隆大展综合楼</td></tr><tr><td>高层建筑</td><td>19世纪末</td><td>1871年整个芝加哥发生了一场重大的火灾，这场导致10万人无家可归的大火烧掉了市中心几乎全部的建筑。火灾过后，市政府开始着手城市的重建工作，由于市中心用地面积有限，又需要尽可能多的建筑面积，唯一的解决方式就是将建筑造得尽量高一些。</td><td>高层钢铁框架结构<br>功能与形式的统一</td><td>芝加哥家庭保险公司大楼<br>第一莱特尔大厦<br>温莱特大厦<br>瓜拉迪大厦</td></tr><tr><td>未来主义</td><td>20世纪初</td><td>这个流派最早出现在意大利，对机器时代拥抱得最彻底的一场的运动。认为速度、运动、战争的暴力才能代表未来的世界。</td><td>未来的城市一定是为大众服务<br>利用地下或地上架空的方式<br>用火车作为城市内部的交通手段</td><td>巴黎蓬皮杜艺术与文化中心<br>香港汇丰银行大厦</td></tr><tr><td>构成主义</td><td>20世纪上半叶</td><td>发源于俄国的构成主义将“结构”作为建筑的本质。</td><td>很类似工程结构物。</td><td>“第三国际”纪念塔</td></tr><tr><td>风格派</td><td>20世纪上半叶</td><td>一战期间，荷兰作为中立国，聚集了一批来自欧洲国家比男的艺术家。成了一个一个艺术组织，提倡将传统的雕塑、建筑等元素“净化”成最基本的几何形体，再利用这些基本的几何形体进行组合来产生新的艺术形象，</td><td>追求几何形体<br>对造型简化处理</td><td>乌德勒支的“施罗德住宅”</td></tr><tr><td>现代主义</td><td>20世纪上半叶</td><td>两次世界大战后，大量城市遭到严重破坏。住房短缺的问题暴露充分。如何快速并且廉价地建造大量住房就成了各国政府最着急的事情。有人提出将建筑设计“标准化”，因为只有这样，大量的房屋构件才可以结合工业批量化地生产、生产的成本也大大降低。功能和材料决定建筑的形式。</td><td>框架体系+玻璃幕墙等多种风格</td><td></td></tr></tbody></table><h1 id="建筑作品"><a href="#建筑作品" class="headerlink" title="建筑作品"></a>建筑作品</h1><p>时代，地理位置，设计者，元素/特色，功能，意义</p><h2 id="万神庙Pantheon"><a href="#万神庙Pantheon" class="headerlink" title="万神庙Pantheon"></a>万神庙Pantheon</h2><p>公元前27-25年，现位于意大利罗马。</p><p>罗马第一位皇帝屋大维Gaius Octavius Augustus为献给奥林匹亚众神而建。</p><ul><li>穹顶：古代欧洲跨度最大无梁圆拱，象征着“天”<ul><li>中央圆洞：建筑内部唯一光源，在4月21日，阳光能通过圆洞照亮整个建筑及入口处。这一天恰好是罗马建城日。</li><li>内部布满凹龛：能减轻穹顶的重量，视觉上形成优美的韵律</li></ul></li><li>柱式：入口8根科林斯式柱子，三角形屋顶，有古希腊神庙的感觉</li><li>集中式建筑</li><li>壁龛：一圈墙体内有8个凹进去的空间，一个用作大门，七个用作目的。其中一个里面躺着拉斐尔</li></ul><h2 id="罗马斗兽场Colosseum"><a href="#罗马斗兽场Colosseum" class="headerlink" title="罗马斗兽场Colosseum"></a>罗马斗兽场Colosseum</h2><p>建于公元72-80年，现位于意大利罗马。</p><p>古罗马后期，由于奴隶制的发展导致社会上出现大量的无业游民，为了安抚这些不安定因素，合理地诱导宣泄暴力，统治者建造了这座免费的公共娱乐设施。</p><ul><li>叠柱式：共四层<ul><li>底层：多立克柱式：象征男性，风格硬朗</li><li>接着：爱奥尼柱式：象征女性，婉转轻柔</li><li>接着：科林斯柱式：雕刻繁复</li><li>顶层：科林斯的实墙</li></ul></li><li>券柱式：单纯的几何外形，丰富的韵律感</li></ul><h2 id="建筑十书"><a href="#建筑十书" class="headerlink" title="建筑十书"></a>建筑十书</h2><p>作者：维特鲁威Marcus Vitruvius Polli，公元前一世纪，活跃于古罗马</p><ul><li>肯定人体与建筑美学的关系，举例：多立克柱式与男性，爱奥尼柱式与女性</li><li>建筑的三大终极定律：<strong>坚固，美观，实用</strong></li></ul><h2 id="圣索菲亚大教堂Hagia-Sophia-Aya-Sofya-Saint-Sophia"><a href="#圣索菲亚大教堂Hagia-Sophia-Aya-Sofya-Saint-Sophia" class="headerlink" title="圣索菲亚大教堂Hagia Sophia/Aya Sofya/Saint Sophia"></a>圣索菲亚大教堂Hagia Sophia/Aya Sofya/Saint Sophia</h2><p>始建于360年，历经三次重建，现为一座博物馆。位于土耳其君士坦丁堡。</p><p>第三次重建于532年，皇帝查士丁尼一世Iustinianus I。目的：</p><ul><li>显示他对基督教的虔诚（笼络民心）。他选择古罗马的巴西利卡作为建筑的基本形式，因为巴西利卡是最原始的教堂形式。</li><li>彰显自己的帝王决心。他看中了象征古罗马帝国极盛时期建筑典范的万神庙的超大穹顶。</li></ul><p>难点：将大穹顶落在方形的巴西利卡上。</p><p>解决方法：使用帆拱，在拱的外侧，用四个巨大的墙墩和垂直方向的两个半穹顶来抵住侧推力。</p><p>经历：553年558年两次地震，859年大火，869年地震，989年地震，圆顶屡次遭到破坏。第四次十字军东征，从东正教被改为天主教教堂。1344年地震，又破坏了圆顶。1453年，土耳其人占领君士坦丁堡，被改为清真寺，现在教堂周围四个高高的宣礼塔就是清真寺建筑的特征。</p><h2 id="佛罗伦萨主教堂Basilica-di-Santa-Maria-del-Fiore"><a href="#佛罗伦萨主教堂Basilica-di-Santa-Maria-del-Fiore" class="headerlink" title="佛罗伦萨主教堂Basilica di Santa Maria del Fiore"></a>佛罗伦萨主教堂Basilica di Santa Maria del Fiore</h2><p>建于1296年，建筑师们：坎皮奥Arnolfo di Cambio，乔托Giotto di Bondone，伯鲁乃列斯基Filippo Brunelleschi</p><p>13世纪末，佛罗伦萨的行会从贵族手中夺取了政权，为了庆祝胜利，市民们建造一座属于自己的教堂。</p><ul><li><p>教堂的平面采用拉丁十字式</p></li><li><p>教堂的歌坛部分设计成了属于东方的集中式</p><ul><li>其上，想建造一个形象鲜明，举世无双的大穹顶来体现新政权的权威。</li></ul></li></ul><p>难点：做出一个完全暴露的大穹顶。建筑建得越高，穹顶造得越大，结构向两边的侧推力就越大。</p><p>解决办法：Brunelleschi</p><ul><li>采用矢形而非半球形，受哥特式的双圆心拱的启发</li><li>穹顶分里外两层，中间是空的，大大减轻了穹顶的重量，也从另一个角度减小了侧推力。</li><li>教堂主体和穹顶之间垫了一段12米高的鼓座，为了进一步抬高穹顶。（拜占庭建筑手法）</li></ul><h2 id="圣彼得大教堂Basilica-di-San-Pietro-in-Vatican"><a href="#圣彼得大教堂Basilica-di-San-Pietro-in-Vatican" class="headerlink" title="圣彼得大教堂Basilica di San Pietro in Vatican"></a>圣彼得大教堂Basilica di San Pietro in Vatican</h2><p>教会与人文主义的拉锯战</p><ul><li>1503年，罗马教皇尤里乌斯二世Giuliano della Rovere下令重建为了纪念圣彼得的圣堂。要求：空前绝后。当时教皇的御用建筑师伯拉孟特Donato Bramante（设计坦比哀多那位）担任总设计师。他是一名坚定的人文主义者。方案：建造一座正方形和<strong>圆形</strong>的大教堂，一个集中式的希腊十字式，完全对称。</li><li>前任教皇去世，Bramante去世。新人教皇利奥十世Giovanni di Lorenzo de’ Medici要求改回天主教的标准形制——<strong>拉丁十字式</strong>。任命拉斐尔Raffaello Santi做设计。</li><li>16世纪上半叶，教皇保罗三世Alessandro Farnese任命米开朗基罗Michelangelo Buonarroti来主持大教堂的设计。Michelangelo主张<ul><li>恢复<strong>希腊十字式的集中式平面</strong></li><li>在<strong>西立面设计了象征古典的柱廊</strong></li><li><strong>穹顶</strong>：推进了一步，更加突出和饱满</li></ul></li><li>1564年，建筑师维尼奥拉Giacomo Barozzi da Vignola建造了大穹顶周围的<strong>四个小穹顶</strong>，引入了拜占庭建筑的手法</li><li>16世纪中叶，欧洲宗教战争，教会获胜。<ul><li>代表天主教的<strong>拉丁十字式重新</strong>被强制规定为标准建筑形式。建筑师卡洛·马代尔诺Carlo Maderno继续完成大教堂的建筑部分</li><li>希腊十字的西侧被强行加上了一段巴西利卡</li><li>米开朗基罗设计的西立面被拆除</li></ul></li><li>文艺复兴之后，教会聘请了巴洛克式大神贝尼尼Gianlorenzo Bernini设计教堂全部内部装饰和教堂外西面的大广场。</li></ul><h2 id="卢浮宫Musee-du-Louvre"><a href="#卢浮宫Musee-du-Louvre" class="headerlink" title="卢浮宫Musée du Louvre"></a>卢浮宫Musée du Louvre</h2><p>13世纪为了抵抗十字军东征而建设的一座城堡。现位于法国巴黎塞纳河北岸。</p><p>路易十四时期，对建筑进行改造。17世纪中期，宫殿的<strong>四合院形态</strong>基本建设完成，东面是一座皇家教堂。</p><p>法国宫廷邀请了贝尼尼Gianlorenzo Bernini，设计了一套<strong>巴洛克风格</strong>方案。</p><p>贝尼尼回国后，采用了<strong>古典主义</strong>方案，东立面最终的形态。</p><p>20世纪末，卢浮宫需要扩建，贝聿铭设计了一个由钢铁和玻璃制造的“大金字塔”和4个“小金字塔”，位于卢浮宫大院子中心。</p><h2 id="凡尔赛宫Chateau-de-Versailles"><a href="#凡尔赛宫Chateau-de-Versailles" class="headerlink" title="凡尔赛宫Château de Versailles"></a>凡尔赛宫Château de Versailles</h2><p>1661年动土。现位于法国巴黎凡尔赛。</p><p>路易十四为了集中控制大贵族们，将他们迁到这座宫殿中。后来为了方便，他干脆将自己的办公地点也迁到了这里。</p><ul><li>建筑整体属于法国<strong>古典主义</strong>风格，<strong>注重理性的比例与几何的运用</strong>，</li><li>由于当时巴洛克的影响，建筑内部的装饰也多为巴洛克风格<ul><li>“镜厅”芒萨尔Monshall设计。他擅长将法国古典主义与意大利巴洛克风格相混合。</li></ul></li><li>其中部分房间发展成了后来的洛可可风格。</li></ul><h1 id="整体概览图"><a href="#整体概览图" class="headerlink" title="整体概览图"></a>整体概览图</h1><p><img src="%E5%BB%BA%E7%AD%91%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%BE%88%E5%A5%BD%E7%8E%A9%EF%BC%9A%E6%AC%A7%E6%B4%B2%E7%AF%87.png" alt="概览图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;建筑也可以很好玩：欧洲篇：从古希腊到文艺复兴&lt;/p&gt;
&lt;p&gt;建筑也可以很好玩：欧洲篇：从古典主义到近现代&lt;/p&gt;
&lt;p&gt;作者：密小斯&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;%E5%BB%BA%E7%AD%911.png&quot; alt=&quot;建筑也可以很好玩：欧洲篇：从古希腊到文艺复兴&quot;</summary>
      
    
    
    
    <category term="Reading Summary" scheme="https://fuguigui.github.io/categories/Reading-Summary/"/>
    
    
    <category term="Europe" scheme="https://fuguigui.github.io/tags/Europe/"/>
    
    <category term="Book" scheme="https://fuguigui.github.io/tags/Book/"/>
    
    <category term="Architecture" scheme="https://fuguigui.github.io/tags/Architecture/"/>
    
  </entry>
  
</feed>
